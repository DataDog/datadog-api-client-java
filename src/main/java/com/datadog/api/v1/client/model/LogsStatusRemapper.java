/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.v1.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.datadog.api.v1.client.model.LogsProcessor;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Use this Processor if you want to assign some attributes as the official status. Each incoming status value is mapped as follows:    - Integers from 0 to 7 map to the Syslog severity standards    - Strings beginning with emerg or f (case-insensitive) map to emerg (0)    - Strings beginning with a (case-insensitive) map to alert (1)    - Strings beginning with c (case-insensitive) map to critical (2)    - Strings beginning with err (case-insensitive) map to error (3)    - Strings beginning with w (case-insensitive) map to warning (4)    - Strings beginning with n (case-insensitive) map to notice (5)    - Strings beginning with i (case-insensitive) map to info (6)    - Strings beginning with d, trace or verbose (case-insensitive) map to debug (7)    - Strings beginning with o or matching OK or Success (case-insensitive) map to OK    - All others map to info (6)    **Note:** If multiple log status remapper processors can be applied to a given log, only the first one (according to the pipelines order) is taken into account.
 */
@ApiModel(description = "Use this Processor if you want to assign some attributes as the official status. Each incoming status value is mapped as follows:    - Integers from 0 to 7 map to the Syslog severity standards    - Strings beginning with emerg or f (case-insensitive) map to emerg (0)    - Strings beginning with a (case-insensitive) map to alert (1)    - Strings beginning with c (case-insensitive) map to critical (2)    - Strings beginning with err (case-insensitive) map to error (3)    - Strings beginning with w (case-insensitive) map to warning (4)    - Strings beginning with n (case-insensitive) map to notice (5)    - Strings beginning with i (case-insensitive) map to info (6)    - Strings beginning with d, trace or verbose (case-insensitive) map to debug (7)    - Strings beginning with o or matching OK or Success (case-insensitive) map to OK    - All others map to info (6)    **Note:** If multiple log status remapper processors can be applied to a given log, only the first one (according to the pipelines order) is taken into account.")
@JsonPropertyOrder({
  LogsStatusRemapper.JSON_PROPERTY_SOURCES,
  LogsStatusRemapper.JSON_PROPERTY_TYPE,
  LogsStatusRemapper.JSON_PROPERTY_IS_ENABLED,
  LogsStatusRemapper.JSON_PROPERTY_NAME
})

public class LogsStatusRemapper implements LogsProcessor {
  public static final String JSON_PROPERTY_SOURCES = "sources";
  private List<String> sources = new ArrayList<>();

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type = "status-remapper";

  public static final String JSON_PROPERTY_IS_ENABLED = "is_enabled";
  private Boolean isEnabled = false;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;


  public LogsStatusRemapper sources(List<String> sources) {
    
    this.sources = sources;
    return this;
  }

  public LogsStatusRemapper addSourcesItem(String sourcesItem) {
    this.sources.add(sourcesItem);
    return this;
  }

   /**
   * Array of source attributes.
   * @return sources
  **/
  @ApiModelProperty(required = true, value = "Array of source attributes.")
  @JsonProperty(JSON_PROPERTY_SOURCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getSources() {
    return sources;
  }


  public void setSources(List<String> sources) {
    this.sources = sources;
  }


   /**
   * Type of processor
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of processor")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }




  public LogsStatusRemapper isEnabled(Boolean isEnabled) {
    
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Whether or not the processor is enabled
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not the processor is enabled")
  @JsonProperty(JSON_PROPERTY_IS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsEnabled() {
    return isEnabled;
  }


  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public LogsStatusRemapper name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the processor
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the processor")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogsStatusRemapper logsStatusRemapper = (LogsStatusRemapper) o;
    return Objects.equals(this.sources, logsStatusRemapper.sources) &&
        Objects.equals(this.type, logsStatusRemapper.type) &&
        Objects.equals(this.isEnabled, logsStatusRemapper.isEnabled) &&
        Objects.equals(this.name, logsStatusRemapper.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sources, type, isEnabled, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogsStatusRemapper {\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

