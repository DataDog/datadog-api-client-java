/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.v2.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.datadog.api.v2.client.model.LogsAggregateSort;
import com.datadog.api.v2.client.model.LogsGroupByHistogram;
import com.datadog.api.v2.client.model.LogsGroupByMissing;
import com.datadog.api.v2.client.model.LogsGroupByTotal;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.datadog.api.v2.client.JSON;


/**
 * A group by rule
 */
@ApiModel(description = "A group by rule")
@JsonPropertyOrder({
  LogsGroupBy.JSON_PROPERTY_FACET,
  LogsGroupBy.JSON_PROPERTY_HISTOGRAM,
  LogsGroupBy.JSON_PROPERTY_LIMIT,
  LogsGroupBy.JSON_PROPERTY_MISSING,
  LogsGroupBy.JSON_PROPERTY_SORT,
  LogsGroupBy.JSON_PROPERTY_TOTAL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LogsGroupBy {
  public static final String JSON_PROPERTY_FACET = "facet";
  private String facet;

  public static final String JSON_PROPERTY_HISTOGRAM = "histogram";
  private LogsGroupByHistogram histogram;

  public static final String JSON_PROPERTY_LIMIT = "limit";
  private Integer limit = 10;

  public static final String JSON_PROPERTY_MISSING = "missing";
  private LogsGroupByMissing missing = null;

  public static final String JSON_PROPERTY_SORT = "sort";
  private LogsAggregateSort sort;

  public static final String JSON_PROPERTY_TOTAL = "total";
  private LogsGroupByTotal total = null;


  public LogsGroupBy facet(String facet) {
    this.facet = facet;
    return this;
  }

   /**
   * The name of the facet to use (required)
   * @return facet
  **/
  @ApiModelProperty(example = "host", required = true, value = "The name of the facet to use (required)")
  @JsonProperty(JSON_PROPERTY_FACET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFacet() {
    return facet;
  }


  public void setFacet(String facet) {
    this.facet = facet;
  }


  public LogsGroupBy histogram(LogsGroupByHistogram histogram) {
    this.histogram = histogram;
    return this;
  }

   /**
   * Get histogram
   * @return histogram
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_HISTOGRAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LogsGroupByHistogram getHistogram() {
    return histogram;
  }


  public void setHistogram(LogsGroupByHistogram histogram) {
    this.histogram = histogram;
  }


  public LogsGroupBy limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * The maximum buckets to return for this group by
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum buckets to return for this group by")
  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLimit() {
    return limit;
  }


  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public LogsGroupBy missing(LogsGroupByMissing missing) {
    this.missing = missing;
    return this;
  }

   /**
   * Get missing
   * @return missing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_MISSING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LogsGroupByMissing getMissing() {
    return missing;
  }


  public void setMissing(LogsGroupByMissing missing) {
    this.missing = missing;
  }


  public LogsGroupBy sort(LogsAggregateSort sort) {
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LogsAggregateSort getSort() {
    return sort;
  }


  public void setSort(LogsAggregateSort sort) {
    this.sort = sort;
  }


  public LogsGroupBy total(LogsGroupByTotal total) {
    this.total = total;
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LogsGroupByTotal getTotal() {
    return total;
  }


  public void setTotal(LogsGroupByTotal total) {
    this.total = total;
  }


  /**
   * Return true if this LogsGroupBy object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogsGroupBy logsGroupBy = (LogsGroupBy) o;
    return Objects.equals(this.facet, logsGroupBy.facet) &&
        Objects.equals(this.histogram, logsGroupBy.histogram) &&
        Objects.equals(this.limit, logsGroupBy.limit) &&
        Objects.equals(this.missing, logsGroupBy.missing) &&
        Objects.equals(this.sort, logsGroupBy.sort) &&
        Objects.equals(this.total, logsGroupBy.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facet, histogram, limit, missing, sort, total);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogsGroupBy {\n");
    sb.append("    facet: ").append(toIndentedString(facet)).append("\n");
    sb.append("    histogram: ").append(toIndentedString(histogram)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    missing: ").append(toIndentedString(missing)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

