/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.v2.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.datadog.api.v2.client.model.LogsArchiveDestinationAzure;
import com.datadog.api.v2.client.model.LogsArchiveDestinationGCS;
import com.datadog.api.v2.client.model.LogsArchiveDestinationS3;
import com.datadog.api.v2.client.model.LogsArchiveDestinationS3Type;
import com.datadog.api.v2.client.model.LogsArchiveIntegrationS3;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;


@JsonDeserialize(using=LogsArchiveDestination.LogsArchiveDestinationDeserializer.class)
public class LogsArchiveDestination extends AbstractOpenApiSchema {
    public static class LogsArchiveDestinationDeserializer extends StdDeserializer<LogsArchiveDestination> {
        public LogsArchiveDestinationDeserializer() {
            this(LogsArchiveDestination.class);
        }

        public LogsArchiveDestinationDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public LogsArchiveDestination deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();

            int match = 0;
            Object deserialized = null;
            // deserialize LogsArchiveDestinationAzure
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(LogsArchiveDestinationAzure.class);
                match++;
            } catch (Exception e) {
                // deserialization failed, continue
            }

            // deserialize LogsArchiveDestinationGCS
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(LogsArchiveDestinationGCS.class);
                match++;
            } catch (Exception e) {
                // deserialization failed, continue
            }

            // deserialize LogsArchiveDestinationS3
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(LogsArchiveDestinationS3.class);
                match++;
            } catch (Exception e) {
                // deserialization failed, continue
            }

            if (match == 1) {
                LogsArchiveDestination ret = new LogsArchiveDestination();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for LogsArchiveDestination: %d classes match result, expected 1", match));
        }
    }

    // store a list of schema names defined in oneOf
    public final static Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public LogsArchiveDestination() {
        super("oneOf", Boolean.FALSE);
    }

    public LogsArchiveDestination(LogsArchiveDestinationAzure o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public LogsArchiveDestination(LogsArchiveDestinationGCS o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public LogsArchiveDestination(LogsArchiveDestinationS3 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("LogsArchiveDestinationAzure", new GenericType<LogsArchiveDestinationAzure>() {
        });
        schemas.put("LogsArchiveDestinationGCS", new GenericType<LogsArchiveDestinationGCS>() {
        });
        schemas.put("LogsArchiveDestinationS3", new GenericType<LogsArchiveDestinationS3>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return LogsArchiveDestination.schemas;
    }

    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof LogsArchiveDestinationAzure) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LogsArchiveDestinationGCS) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LogsArchiveDestinationS3) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be LogsArchiveDestinationAzure, LogsArchiveDestinationGCS, LogsArchiveDestinationS3");
    }



}

