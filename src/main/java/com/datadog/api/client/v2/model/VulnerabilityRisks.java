/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 */

package com.datadog.api.client.v2.model;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Vulnerability risks. */
@JsonPropertyOrder({
  VulnerabilityRisks.JSON_PROPERTY_EPSS,
  VulnerabilityRisks.JSON_PROPERTY_EXPLOIT_AVAILABLE,
  VulnerabilityRisks.JSON_PROPERTY_EXPLOIT_SOURCES,
  VulnerabilityRisks.JSON_PROPERTY_EXPLOITATION_PROBABILITY,
  VulnerabilityRisks.JSON_PROPERTY_POC_EXPLOIT_AVAILABLE
})
@jakarta.annotation.Generated(
    value = "https://github.com/DataDog/datadog-api-client-java/blob/master/.generator")
public class VulnerabilityRisks {
  @JsonIgnore public boolean unparsed = false;
  public static final String JSON_PROPERTY_EPSS = "epss";
  private EPSS epss;

  public static final String JSON_PROPERTY_EXPLOIT_AVAILABLE = "exploit_available";
  private Boolean exploitAvailable;

  public static final String JSON_PROPERTY_EXPLOIT_SOURCES = "exploit_sources";
  private List<String> exploitSources = new ArrayList<>();

  public static final String JSON_PROPERTY_EXPLOITATION_PROBABILITY = "exploitation_probability";
  private Boolean exploitationProbability;

  public static final String JSON_PROPERTY_POC_EXPLOIT_AVAILABLE = "poc_exploit_available";
  private Boolean pocExploitAvailable;

  public VulnerabilityRisks() {}

  @JsonCreator
  public VulnerabilityRisks(
      @JsonProperty(required = true, value = JSON_PROPERTY_EXPLOIT_AVAILABLE)
          Boolean exploitAvailable,
      @JsonProperty(required = true, value = JSON_PROPERTY_EXPLOIT_SOURCES)
          List<String> exploitSources,
      @JsonProperty(required = true, value = JSON_PROPERTY_EXPLOITATION_PROBABILITY)
          Boolean exploitationProbability,
      @JsonProperty(required = true, value = JSON_PROPERTY_POC_EXPLOIT_AVAILABLE)
          Boolean pocExploitAvailable) {
    this.exploitAvailable = exploitAvailable;
    this.exploitSources = exploitSources;
    this.exploitationProbability = exploitationProbability;
    this.pocExploitAvailable = pocExploitAvailable;
  }

  public VulnerabilityRisks epss(EPSS epss) {
    this.epss = epss;
    this.unparsed |= epss.unparsed;
    return this;
  }

  /**
   * Vulnerability EPSS severity.
   *
   * @return epss
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EPSS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public EPSS getEpss() {
    return epss;
  }

  public void setEpss(EPSS epss) {
    this.epss = epss;
  }

  public VulnerabilityRisks exploitAvailable(Boolean exploitAvailable) {
    this.exploitAvailable = exploitAvailable;
    return this;
  }

  /**
   * Vulnerability public exploit availability.
   *
   * @return exploitAvailable
   */
  @JsonProperty(JSON_PROPERTY_EXPLOIT_AVAILABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getExploitAvailable() {
    return exploitAvailable;
  }

  public void setExploitAvailable(Boolean exploitAvailable) {
    this.exploitAvailable = exploitAvailable;
  }

  public VulnerabilityRisks exploitSources(List<String> exploitSources) {
    this.exploitSources = exploitSources;
    return this;
  }

  public VulnerabilityRisks addExploitSourcesItem(String exploitSourcesItem) {
    this.exploitSources.add(exploitSourcesItem);
    return this;
  }

  /**
   * Vulnerability exploit sources.
   *
   * @return exploitSources
   */
  @JsonProperty(JSON_PROPERTY_EXPLOIT_SOURCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<String> getExploitSources() {
    return exploitSources;
  }

  public void setExploitSources(List<String> exploitSources) {
    this.exploitSources = exploitSources;
  }

  public VulnerabilityRisks exploitationProbability(Boolean exploitationProbability) {
    this.exploitationProbability = exploitationProbability;
    return this;
  }

  /**
   * Vulnerability exploitation probability.
   *
   * @return exploitationProbability
   */
  @JsonProperty(JSON_PROPERTY_EXPLOITATION_PROBABILITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getExploitationProbability() {
    return exploitationProbability;
  }

  public void setExploitationProbability(Boolean exploitationProbability) {
    this.exploitationProbability = exploitationProbability;
  }

  public VulnerabilityRisks pocExploitAvailable(Boolean pocExploitAvailable) {
    this.pocExploitAvailable = pocExploitAvailable;
    return this;
  }

  /**
   * Vulnerability POC exploit availability.
   *
   * @return pocExploitAvailable
   */
  @JsonProperty(JSON_PROPERTY_POC_EXPLOIT_AVAILABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getPocExploitAvailable() {
    return pocExploitAvailable;
  }

  public void setPocExploitAvailable(Boolean pocExploitAvailable) {
    this.pocExploitAvailable = pocExploitAvailable;
  }

  /**
   * A container for additional, undeclared properties. This is a holder for any undeclared
   * properties as specified with the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value. If the property
   * does not already exist, create it otherwise replace it.
   *
   * @param key The arbitrary key to set
   * @param value The associated value
   * @return VulnerabilityRisks
   */
  @JsonAnySetter
  public VulnerabilityRisks putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
      this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return The additional properties
   */
  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key The arbitrary key to get
   * @return The specific additional property for the given key
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
      return null;
    }
    return this.additionalProperties.get(key);
  }

  /** Return true if this VulnerabilityRisks object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerabilityRisks vulnerabilityRisks = (VulnerabilityRisks) o;
    return Objects.equals(this.epss, vulnerabilityRisks.epss)
        && Objects.equals(this.exploitAvailable, vulnerabilityRisks.exploitAvailable)
        && Objects.equals(this.exploitSources, vulnerabilityRisks.exploitSources)
        && Objects.equals(this.exploitationProbability, vulnerabilityRisks.exploitationProbability)
        && Objects.equals(this.pocExploitAvailable, vulnerabilityRisks.pocExploitAvailable)
        && Objects.equals(this.additionalProperties, vulnerabilityRisks.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        epss,
        exploitAvailable,
        exploitSources,
        exploitationProbability,
        pocExploitAvailable,
        additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerabilityRisks {\n");
    sb.append("    epss: ").append(toIndentedString(epss)).append("\n");
    sb.append("    exploitAvailable: ").append(toIndentedString(exploitAvailable)).append("\n");
    sb.append("    exploitSources: ").append(toIndentedString(exploitSources)).append("\n");
    sb.append("    exploitationProbability: ")
        .append(toIndentedString(exploitationProbability))
        .append("\n");
    sb.append("    pocExploitAvailable: ")
        .append(toIndentedString(pocExploitAvailable))
        .append("\n");
    sb.append("    additionalProperties: ")
        .append(toIndentedString(additionalProperties))
        .append("\n");
    sb.append('}');
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
