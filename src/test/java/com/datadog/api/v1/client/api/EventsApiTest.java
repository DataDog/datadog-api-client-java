/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.datadog.api.v1.client.api;

import com.datadog.api.v1.client.ApiException;
import com.datadog.api.v1.client.model.Event;
import com.datadog.api.v1.client.model.Event.PriorityEnum;
import com.datadog.api.v1.client.model.EventListResponse;
import com.datadog.api.v1.client.model.EventResponse;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.MatcherAssert.assertThat;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;

/**
 * API tests for EventsApi
 */
public class EventsApiTest extends V1ApiTest {

    private static EventsApi api;

    @BeforeClass
    public static void initApi() {
        api = new EventsApi(generalApiClient);
    }

    /**
     * Test event lifecycle.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventLifecycleTest() throws ApiException {
        final Event event = new Event().title("test event from java client").text("example text")
                .tags(new ArrayList<String>(Arrays.asList("test", "client:java"))).priority(PriorityEnum.NORMAL)
                .sourceTypeName("datadog-api-client-java");

        EventResponse response = api.createEvent().body(event).execute();

        final Event createdEvent = response.getEvent();
        final String status = response.getStatus();
        assertEquals("ok", status);
        assertEquals(event.getTitle(), createdEvent.getTitle());
        assertEquals(event.getText(), createdEvent.getText());
        assertNotEquals("", createdEvent.getUrl());

        final Long eventId = createdEvent.getId();

        int count = 20;
        int interval = 5;  // seconds
        for (int i = 0; i < count; i++) {
            try {
                response = api.getEvent(eventId).execute();
                break;
            } catch (ApiException e) {
                try { Thread.sleep(interval * 1000); } catch (InterruptedException e1) {}
            }
        }

        final Event fetchedEvent = response.getEvent();
        assertEquals(event.getTitle(), fetchedEvent.getTitle());
        assertEquals(event.getText(), fetchedEvent.getText());
        assertNotEquals("", fetchedEvent.getUrl());

        final Long start = fetchedEvent.getDateHappened() - 10;
        final Long end = start + 20;
        final String priority = fetchedEvent.getPriority().getValue();
        final String sources = fetchedEvent.getSourceTypeName();
        final String tags = String.join(",", fetchedEvent.getTags());
        final Boolean unaggregated = true;
        final EventListResponse eventListResponse = api.listEvents().start(start).end(end).priority(priority)
                .sources(sources).tags(tags).unaggregated(unaggregated).execute();

        List<Event> events = new ArrayList<Event>();
        count = 20;
        interval = 5;  // seconds
        for (int i = 0; i < count; i++) {
                events = eventListResponse.getEvents();
                if (events.isEmpty())
                    try { Thread.sleep(interval * 1000); } catch (InterruptedException e1) {}
                else
                    break;
        }
        System.out.printf("Events: %s\n\nFetchedEvent: %s", events, fetchedEvent);
        assertThat(events, hasItems(fetchedEvent));
    }
}
