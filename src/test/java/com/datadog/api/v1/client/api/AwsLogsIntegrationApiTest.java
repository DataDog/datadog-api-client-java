/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.datadog.api.v1.client.api;

import com.datadog.api.v1.client.*;
import com.datadog.api.v1.client.auth.*;
import org.junit.Test;

/** API tests for AwsLogsIntegrationApi */
public class AwsLogsIntegrationApiTest {

  private final AwsLogsIntegrationApi api = new AwsLogsIntegrationApi();

  /**
   * Check that an AWS Lambda Function exists
   *
   * <p>Test if permissions are present to add a log-forwarding triggers for the given services and
   * AWS account. The input is the same as for Enable an AWS service log collection. Subsequent
   * requests will always repeat the above, so this endpoint can be polled intermittently instead of
   * blocking. - Returns a status of &#39;created&#39; when it&#39;s checking if the Lambda exists
   * in the account. - Returns a status of &#39;waiting&#39; while checking. - Returns a status of
   * &#39;checked and ok&#39; if the Lambda exists. - Returns a status of &#39;error&#39; if the
   * Lambda does not exist.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void checkAWSLogsLambdaAsyncTest() throws ApiException {
    // AWSAccountAndLambdaRequest body = null;
    // AWSLogsAsyncResponse response = api.checkAWSLogsLambdaAsync()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Check permissions for log services
   *
   * <p>Test if permissions are present to add log-forwarding triggers for the given services and
   * AWS account. Input is the same as for &#x60;EnableAWSLogServices&#x60;. Done async, so can be
   * repeatedly polled in a non-blocking fashion until the async request completes. - Returns a
   * status of &#x60;created&#x60; when it&#39;s checking if the permissions exists in the AWS
   * account. - Returns a status of &#x60;waiting&#x60; while checking. - Returns a status of
   * &#x60;checked and ok&#x60; if the Lambda exists. - Returns a status of &#x60;error&#x60; if the
   * Lambda does not exist.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void checkAWSLogsServicesAsyncTest() throws ApiException {
    // AWSLogsServicesRequest body = null;
    // AWSLogsAsyncResponse response = api.checkAWSLogsServicesAsync()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Add AWS Log Lambda ARN
   *
   * <p>Attach the Lambda ARN of the Lambda created for the Datadog-AWS log collection to your AWS
   * account ID to enable log collection.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void createAWSLambdaARNTest() throws ApiException {
    // AWSAccountAndLambdaRequest body = null;
    // Object response = api.createAWSLambdaARN()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Delete an AWS Logs integration
   *
   * <p>Delete a Datadog-AWS logs configuration by removing the specific Lambda ARN associated with
   * a given AWS account.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void deleteAWSLambdaARNTest() throws ApiException {
    // AWSAccountAndLambdaRequest body = null;
    // Object response = api.deleteAWSLambdaARN()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Enable an AWS Logs integration
   *
   * <p>Enable automatic log collection for a list of services. This should be run after running
   * &#x60;CreateAWSLambdaARN&#x60; to save the configuration.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void enableAWSLogServicesTest() throws ApiException {
    // AWSLogsServicesRequest body = null;
    // Object response = api.enableAWSLogServices()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * List all AWS Logs integrations
   *
   * <p>List all Datadog-AWS Logs integrations configured in your Datadog account.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listAWSLogsIntegrationsTest() throws ApiException {
    // List<AWSLogsListResponse> response = api.listAWSLogsIntegrations()
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get list of AWS log ready services
   *
   * <p>Get the list of current AWS services that Datadog offers automatic log collection. Use
   * returned service IDs with the services parameter for the Enable an AWS service log collection
   * API endpoint.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listAWSLogsServicesTest() throws ApiException {
    // List<AWSLogsListServicesResponse> response = api.listAWSLogsServices()
    //        .execute();
    // TODO: test validations
  }
}
