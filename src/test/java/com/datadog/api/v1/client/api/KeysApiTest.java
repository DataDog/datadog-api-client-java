/*
 * (C) Datadog, Inc. 2019
 * All rights reserved
 * Licensed under a 3-clause BSD style license (see LICENSE)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.datadog.api.v1.client.api;

import com.datadog.api.v1.client.ApiException;
import com.datadog.api.v1.client.model.ApiKey;
import com.datadog.api.v1.client.model.ApiKeyListResponse;
import com.datadog.api.v1.client.model.ApiKeyResponse;
import com.datadog.api.v1.client.model.ApplicationKey;
import com.datadog.api.v1.client.model.ApplicationKeyListResponse;
import com.datadog.api.v1.client.model.ApplicationKeyResponse;
import com.datadog.api.v1.client.model.Error400;
import com.datadog.api.v1.client.model.Error403;
import com.datadog.api.v1.client.model.Error404;
import com.datadog.api.v1.client.model.Error409;
import org.junit.Test;
import org.junit.Ignore;
import com.github.tomakehurst.wiremock.client.MappingBuilder;
import static com.github.tomakehurst.wiremock.client.WireMock.*;
import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for KeysApi
 */
public class KeysApiTest extends V1ApiTest{

    private final KeysApi api = new KeysApi(generalApiUnitTestClient);
    private final String apiUri = "/api/v1/api_key";
    private final String appUri = "/api/v1/application_key";
    private final String fixturePrefix = "keys_fixtures";

    /**
     * Create an API key with a given name.
     *
     * ## Overview Creates an API key ### ARGUMENTS * **&#x60;name&#x60;** [*required*]: Name of your API key.
     *
     * @throws ApiException
     *          if the Api call fails
     * @throws IOException
     *          if the fixture data cannot be loaded
     */
    @Test
    public void createAPIKeyTest() throws ApiException, IOException {
        String apiKeyName = "Test Name";
        MappingBuilder stub = setupStub(apiUri, fixturePrefix+"/create_api_key.json", "post");
        stubFor(stub);

        ApiKey apiKey = new ApiKey().name(apiKeyName);
        KeysApi.CreateAPIKeyParams opts = new KeysApi.CreateAPIKeyParams();
        ApiKeyResponse response = api.createAPIKey(apiKey, opts);

        // Assert values match whats in create_api_key.json
        assertEquals(response.getApiKey().getCreatedBy(), "john@example.com");
        assertEquals(response.getApiKey().getName(), "<API_KEY_NAME>");
        assertEquals(response.getApiKey().getKey(), "3111111111111111aaaaaaaaaaaaaaaa");
        assertEquals(response.getApiKey().getCreated(), "2019-04-05 09:47:00");
    }

    /**
     * Create an application key with a given name.
     *
     * ## Overview Create an application key with a given name. ### ARGUMENTS * **&#x60;name&#x60;** [*required*]: Name of your application key.
     *
     * @throws ApiException
     *          if the Api call fails
     * @throws IOException
     *          if the fixture data cannot be loaded
     */
    @Test
    public void createApplicationKeyTest() throws ApiException, IOException {
        String appKeyName = "Test Name";
        MappingBuilder stub = setupStub(appUri, fixturePrefix+"/create_app_key.json", "post");
        stubFor(stub);

        ApplicationKey applicationKey = new ApplicationKey().name(appKeyName);
        KeysApi.CreateApplicationKeyParams opts = new KeysApi.CreateApplicationKeyParams();
        ApplicationKeyResponse response = api.createApplicationKey(applicationKey, opts);

        // Assert values match whats in create_app_key.json
        assertEquals(response.getApplicationKey().getOwner(), "john@example.com");
        assertEquals(response.getApplicationKey().getHash(), "31111111111111111111aaaaaaaaaaaaaaaaaaaa");
        assertEquals(response.getApplicationKey().getName(), "<APP_KEY_NAME>");
    }

    /**
     * Delete a given API key.
     *
     * ## Overview Delete a given API key. ### ARGUMENTS This endpoint takes no JSON arguments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore
    public void deleteAPIKeyTest() throws ApiException {
        String key = null;
        KeysApi.DeleteAPIKeyParams opts = new KeysApi.DeleteAPIKeyParams();
        ApiKeyResponse response = api.deleteAPIKey(key, opts);

        // TODO: test validations
    }

    /**
     * Delete a given application key.
     *
     * ## Overview Delete a given application key. ### ARGUMENTS This endpoint takes no JSON arguments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore
    public void deleteApplicationKeyTest() throws ApiException {
        String key = null;
        KeysApi.DeleteApplicationKeyParams opts = new KeysApi.DeleteApplicationKeyParams();
        ApplicationKeyResponse response = api.deleteApplicationKey(key, opts);

        // TODO: test validations
    }

    /**
     * Edit an API key name.
     *
     * ## Overview Edit an API key name. ### ARGUMENTS * **&#x60;name&#x60;** [*required*]: Name of your API key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore
    public void editAPIKeyTest() throws ApiException {
        String key = null;
        ApiKey apiKey = null;
        KeysApi.EditAPIKeyParams opts = new KeysApi.EditAPIKeyParams();
        ApiKeyResponse response = api.editAPIKey(key, apiKey, opts);

        // TODO: test validations
    }

    /**
     * Edit an application key name.
     *
     * ## Overview Edit an application key name. ### ARGUMENTS * **&#x60;name&#x60;** [*required*]: Name of your application key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore
    public void editApplicationKeyTest() throws ApiException {
        String key = null;
        ApplicationKey applicationKey = null;
        KeysApi.EditApplicationKeyParams opts = new KeysApi.EditApplicationKeyParams();
        ApplicationKeyResponse response = api.editApplicationKey(key, applicationKey, opts);

        // TODO: test validations
    }

    /**
     * Get a given API key.
     *
     * ## Overview Get a given API key. ### ARGUMENTS This endpoint takes no JSON arguments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore
    public void getAPIKeyTest() throws ApiException {
        String key = null;
        KeysApi.GetAPIKeyParams opts = new KeysApi.GetAPIKeyParams();
        ApiKeyResponse response = api.getAPIKey(key, opts);

        // TODO: test validations
    }

    /**
     * Get all API keys available for your account.
     *
     * ## Overview Get all API keys available for your account. ### ARGUMENTS This endpoint takes no JSON arguments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore
    public void getAllAPIKeysTest() throws ApiException {
        KeysApi.GetAllAPIKeysParams opts = new KeysApi.GetAllAPIKeysParams();
        ApiKeyListResponse response = api.getAllAPIKeys(opts);

        // TODO: test validations
    }

    /**
     * Get all application keys available for your account.
     *
     * ## Overview Get all application keys available for your account. ### ARGUMENTS This endpoint takes no JSON arguments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore
    public void getAllApplicationKeysTest() throws ApiException {
        KeysApi.GetAllApplicationKeysParams opts = new KeysApi.GetAllApplicationKeysParams();
        ApplicationKeyListResponse response = api.getAllApplicationKeys(opts);

        // TODO: test validations
    }

    /**
     * Get a given application key.
     *
     * ## Overview Get a given application key. ### ARGUMENTS This endpoint takes no JSON arguments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Ignore
    public void getApplicationKeyTest() throws ApiException {
        String key = null;
        KeysApi.GetApplicationKeyParams opts = new KeysApi.GetApplicationKeyParams();
        ApplicationKeyResponse response = api.getApplicationKey(key, opts);

        // TODO: test validations
    }

}
