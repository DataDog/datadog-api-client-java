/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.datadog.api.v1.client.api;

import com.datadog.api.v1.client.*;
import com.datadog.api.v1.client.auth.*;
import org.junit.Test;

/** API tests for SyntheticsApi */
public class SyntheticsApiTest {

  private final SyntheticsApi api = new SyntheticsApi();

  /**
   * Create a global variable
   *
   * <p>Create a Synthetics global variable.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void createGlobalVariableTest() throws ApiException {
    // SyntheticsGlobalVariable body = null;
    // SyntheticsGlobalVariable response = api.createGlobalVariable()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Create a private location
   *
   * <p>Create a new Synthetics private location.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void createPrivateLocationTest() throws ApiException {
    // SyntheticsPrivateLocation body = null;
    // SyntheticsPrivateLocationCreationResponse response = api.createPrivateLocation()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Create an API test
   *
   * <p>Create a Synthetic API test.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void createSyntheticsAPITestTest() throws ApiException {
    // SyntheticsAPITest body = null;
    // SyntheticsAPITest response = api.createSyntheticsAPITest()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Create a browser test
   *
   * <p>Create a Synthetic browser test.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void createSyntheticsBrowserTestTest() throws ApiException {
    // SyntheticsBrowserTest body = null;
    // SyntheticsBrowserTest response = api.createSyntheticsBrowserTest()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Delete a global variable
   *
   * <p>Delete a Synthetics global variable.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void deleteGlobalVariableTest() throws ApiException {
    // String variableId = null;
    // api.deleteGlobalVariable(variableId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Delete a private location
   *
   * <p>Delete a Synthetics private location.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void deletePrivateLocationTest() throws ApiException {
    // String locationId = null;
    // api.deletePrivateLocation(locationId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Delete tests
   *
   * <p>Delete multiple Synthetic tests by ID.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void deleteTestsTest() throws ApiException {
    // SyntheticsDeleteTestsPayload body = null;
    // SyntheticsDeleteTestsResponse response = api.deleteTests()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Edit a global variable
   *
   * <p>Edit a Synthetics global variable.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void editGlobalVariableTest() throws ApiException {
    // String variableId = null;
    // SyntheticsGlobalVariable body = null;
    // SyntheticsGlobalVariable response = api.editGlobalVariable(variableId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get an API test
   *
   * <p>Get the detailed configuration associated with a Synthetic API test.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getAPITestTest() throws ApiException {
    // String publicId = null;
    // SyntheticsAPITest response = api.getAPITest(publicId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get an API test&#39;s latest results summaries
   *
   * <p>Get the last 50 test results summaries for a given Synthetics API test.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getAPITestLatestResultsTest() throws ApiException {
    // String publicId = null;
    // Long fromTs = null;
    // Long toTs = null;
    // List<String> probeDc = null;
    // SyntheticsGetAPITestLatestResultsResponse response = api.getAPITestLatestResults(publicId)
    //        .fromTs(fromTs)
    //        .toTs(toTs)
    //        .probeDc(probeDc)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get an API test result
   *
   * <p>Get a specific full result from a given (API) Synthetic test.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getAPITestResultTest() throws ApiException {
    // String publicId = null;
    // String resultId = null;
    // SyntheticsAPITestResultFull response = api.getAPITestResult(publicId, resultId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a browser test
   *
   * <p>Get the detailed configuration (including steps) associated with a Synthetic browser test.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getBrowserTestTest() throws ApiException {
    // String publicId = null;
    // SyntheticsBrowserTest response = api.getBrowserTest(publicId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a browser test&#39;s latest results summaries
   *
   * <p>Get the last 50 test results summaries for a given Synthetics Browser test.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getBrowserTestLatestResultsTest() throws ApiException {
    // String publicId = null;
    // Long fromTs = null;
    // Long toTs = null;
    // List<String> probeDc = null;
    // SyntheticsGetBrowserTestLatestResultsResponse response =
    // api.getBrowserTestLatestResults(publicId)
    //        .fromTs(fromTs)
    //        .toTs(toTs)
    //        .probeDc(probeDc)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a browser test result
   *
   * <p>Get a specific full result from a given (browser) Synthetic test.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getBrowserTestResultTest() throws ApiException {
    // String publicId = null;
    // String resultId = null;
    // SyntheticsBrowserTestResultFull response = api.getBrowserTestResult(publicId, resultId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a global variable
   *
   * <p>Get the detailed configuration of a global variable.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getGlobalVariableTest() throws ApiException {
    // String variableId = null;
    // SyntheticsGlobalVariable response = api.getGlobalVariable(variableId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a private location
   *
   * <p>Get a Synthetics private location.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getPrivateLocationTest() throws ApiException {
    // String locationId = null;
    // SyntheticsPrivateLocation response = api.getPrivateLocation(locationId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get details of batch
   *
   * <p>Get a batch&#39;s updated details.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getSyntheticsCIBatchTest() throws ApiException {
    // String batchId = null;
    // SyntheticsBatchDetails response = api.getSyntheticsCIBatch(batchId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a test configuration
   *
   * <p>Get the detailed configuration associated with a Synthetics test.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getTestTest() throws ApiException {
    // String publicId = null;
    // SyntheticsTestDetails response = api.getTest(publicId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get all global variables
   *
   * <p>Get the list of all Synthetics global variables.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listGlobalVariablesTest() throws ApiException {
    // SyntheticsListGlobalVariablesResponse response = api.listGlobalVariables()
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get all locations (public and private)
   *
   * <p>Get the list of public and private locations available for Synthetic tests. No arguments
   * required.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listLocationsTest() throws ApiException {
    // SyntheticsLocations response = api.listLocations()
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get the list of all tests
   *
   * <p>Get the list of all Synthetic tests.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listTestsTest() throws ApiException {
    // SyntheticsListTestsResponse response = api.listTests()
    //        .execute();
    // TODO: test validations
  }

  /**
   * Trigger tests from CI/CD pipelines
   *
   * <p>Trigger a set of Synthetics tests for continuous integration.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void triggerCITestsTest() throws ApiException {
    // SyntheticsCITestBody body = null;
    // SyntheticsTriggerCITestsResponse response = api.triggerCITests()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Trigger Synthetics tests
   *
   * <p>Trigger a set of Synthetics tests.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void triggerTestsTest() throws ApiException {
    // SyntheticsTriggerBody body = null;
    // SyntheticsTriggerCITestsResponse response = api.triggerTests()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Edit an API test
   *
   * <p>Edit the configuration of a Synthetic API test.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void updateAPITestTest() throws ApiException {
    // String publicId = null;
    // SyntheticsAPITest body = null;
    // SyntheticsAPITest response = api.updateAPITest(publicId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Edit a browser test
   *
   * <p>Edit the configuration of a Synthetic browser test.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void updateBrowserTestTest() throws ApiException {
    // String publicId = null;
    // SyntheticsBrowserTest body = null;
    // SyntheticsBrowserTest response = api.updateBrowserTest(publicId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Edit a private location
   *
   * <p>Edit a Synthetics private location.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void updatePrivateLocationTest() throws ApiException {
    // String locationId = null;
    // SyntheticsPrivateLocation body = null;
    // SyntheticsPrivateLocation response = api.updatePrivateLocation(locationId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Pause or start a test
   *
   * <p>Pause or start a Synthetics test by changing the status.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void updateTestPauseStatusTest() throws ApiException {
    // String publicId = null;
    // SyntheticsUpdateTestPauseStatusPayload body = null;
    // Boolean response = api.updateTestPauseStatus(publicId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }
}
