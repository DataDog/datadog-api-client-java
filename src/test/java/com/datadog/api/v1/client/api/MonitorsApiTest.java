/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.datadog.api.v1.client.api;

import com.datadog.api.v1.client.*;
import com.datadog.api.v1.client.auth.*;
import org.junit.Test;

/** API tests for MonitorsApi */
public class MonitorsApiTest {

  private final MonitorsApi api = new MonitorsApi();

  /**
   * Check if a monitor can be deleted
   *
   * <p>Check if the given monitors can be deleted.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void checkCanDeleteMonitorTest() throws ApiException {
    // List<Long> monitorIds = null;
    // CheckCanDeleteMonitorResponse response = api.checkCanDeleteMonitor()
    //        .monitorIds(monitorIds)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Create a monitor
   *
   * <p>Create a monitor using the specified options. #### Monitor Types The type of monitor chosen
   * from: - anomaly: &#x60;query alert&#x60; - APM: &#x60;query alert&#x60; or
   * &#x60;trace-analytics alert&#x60; - composite: &#x60;composite&#x60; - custom: &#x60;service
   * check&#x60; - event: &#x60;event alert&#x60; - forecast: &#x60;query alert&#x60; - host:
   * &#x60;service check&#x60; - integration: &#x60;query alert&#x60; or &#x60;service check&#x60; -
   * live process: &#x60;process alert&#x60; - logs: &#x60;log alert&#x60; - metric: &#x60;query
   * alert&#x60; - network: &#x60;service check&#x60; - outlier: &#x60;query alert&#x60; - process:
   * &#x60;service check&#x60; - rum: &#x60;rum alert&#x60; - SLO: &#x60;slo alert&#x60; - watchdog:
   * &#x60;event alert&#x60; - event-v2: &#x60;event-v2 alert&#x60; - audit: &#x60;audit alert&#x60;
   * #### Query Types **Metric Alert Query** Example:
   * &#x60;time_aggr(time_window):space_aggr:metric{tags} [by {key}] operator #&#x60; -
   * &#x60;time_aggr&#x60;: avg, sum, max, min, change, or pct_change - &#x60;time_window&#x60;:
   * &#x60;last_#m&#x60; (with &#x60;#&#x60; between 1 and 10080 depending on the monitor type) or
   * &#x60;last_#h&#x60;(with &#x60;#&#x60; between 1 and 168 depending on the monitor type) or
   * &#x60;last_1d&#x60;, or &#x60;last_1w&#x60; - &#x60;space_aggr&#x60;: avg, sum, min, or max -
   * &#x60;tags&#x60;: one or more tags (comma-separated), or * - &#x60;key&#x60;: a &#39;key&#39;
   * in key:value tag syntax; defines a separate alert for each tag in the group (multi-alert) -
   * &#x60;operator&#x60;: &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;&#x3D;, or !&#x3D; -
   * &#x60;#&#x60;: an integer or decimal number used to set the threshold If you are using the
   * &#x60;_change_&#x60; or &#x60;_pct_change_&#x60; time aggregator, instead use
   * &#x60;change_aggr(time_aggr(time_window), timeshift):space_aggr:metric{tags} [by {key}]
   * operator #&#x60; with: - &#x60;change_aggr&#x60; change, pct_change - &#x60;time_aggr&#x60;
   * avg, sum, max, min [Learn
   * more](https://docs.datadoghq.com/monitors/create/types/#define-the-conditions) -
   * &#x60;time_window&#x60; last\\_#m (between 1 and 2880 depending on the monitor type), last\\_#h
   * (between 1 and 48 depending on the monitor type), or last_#d (1 or 2) - &#x60;timeshift&#x60;
   * #m_ago (5, 10, 15, or 30), #h_ago (1, 2, or 4), or 1d_ago Use this to create an outlier monitor
   * using the following query:
   * &#x60;avg(last_30m):outliers(avg:system.cpu.user{role:es-events-data} by {host},
   * &#39;dbscan&#39;, 7) &gt; 0&#x60; **Service Check Query** Example:
   * &#x60;\&quot;check\&quot;.over(tags).last(count).by(group).count_by_status()&#x60; -
   * **&#x60;check&#x60;** name of the check, e.g. &#x60;datadog.agent.up&#x60; -
   * **&#x60;tags&#x60;** one or more quoted tags (comma-separated), or \&quot;*\&quot;. e.g.:
   * &#x60;.over(\&quot;env:prod\&quot;, \&quot;role:db\&quot;)&#x60;; **&#x60;over&#x60;** cannot
   * be blank. - **&#x60;count&#x60;** must be at greater than or equal to your max threshold
   * (defined in the &#x60;options&#x60;). It is limited to 100. For example, if you&#39;ve
   * specified to notify on 1 critical, 3 ok, and 2 warn statuses, &#x60;count&#x60; should be at
   * least 3. - **&#x60;group&#x60;** must be specified for check monitors. Per-check grouping is
   * already explicitly known for some service checks. For example, Postgres integration monitors
   * are tagged by &#x60;db&#x60;, &#x60;host&#x60;, and &#x60;port&#x60;, and Network monitors by
   * &#x60;host&#x60;, &#x60;instance&#x60;, and &#x60;url&#x60;. See [Service
   * Checks](https://docs.datadoghq.com/api/latest/service-checks/) documentation for more
   * information. **Event Alert Query** Example: &#x60;events(&#39;sources:nagios
   * status:error,warning priority:normal tags: \&quot;string
   * query\&quot;&#39;).rollup(\&quot;count\&quot;).last(\&quot;1h\&quot;)\&quot;&#x60; -
   * **&#x60;event&#x60;**, the event query string: - **&#x60;string_query&#x60;** free text query
   * to match against event title and text. - **&#x60;sources&#x60;** event sources
   * (comma-separated). - **&#x60;status&#x60;** event statuses (comma-separated). Valid options:
   * error, warn, and info. - **&#x60;priority&#x60;** event priorities (comma-separated). Valid
   * options: low, normal, all. - **&#x60;host&#x60;** event reporting host (comma-separated). -
   * **&#x60;tags&#x60;** event tags (comma-separated). - **&#x60;excluded_tags&#x60;** excluded
   * event tags (comma-separated). - **&#x60;rollup&#x60;** the stats roll-up method.
   * &#x60;count&#x60; is the only supported method now. - **&#x60;last&#x60;** the timeframe to
   * roll up the counts. Examples: 45m, 4h. Supported timeframes: m, h and d. This value should not
   * exceed 48 hours. **NOTE** Only available on US1 and EU. **Event V2 Alert Query** Example:
   * &#x60;events(query).rollup(rollup_method[, measure]).last(time_window) operator #&#x60; -
   * **&#x60;query&#x60;** The search query - following the [Log search
   * syntax](https://docs.datadoghq.com/logs/search_syntax/). - **&#x60;rollup_method&#x60;** The
   * stats roll-up method - supports &#x60;count&#x60;, &#x60;avg&#x60; and &#x60;cardinality&#x60;.
   * - **&#x60;measure&#x60;** For &#x60;avg&#x60; and cardinality &#x60;rollup_method&#x60; -
   * specify the measure or the facet name you want to use. - **&#x60;time_window&#x60;** #m
   * (between 1 and 2880), #h (between 1 and 48). - **&#x60;operator&#x60;** &#x60;&lt;&#x60;,
   * &#x60;&lt;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;&gt;&#x3D;&#x60;, &#x60;&#x3D;&#x3D;&#x60;, or
   * &#x60;!&#x3D;&#x60;. - **&#x60;#&#x60;** an integer or decimal number used to set the
   * threshold. **NOTE** Only available on US1-FED, US3, US5 and in closed beta on EU and US1.
   * **Process Alert Query** Example:
   * &#x60;processes(search).over(tags).rollup(&#39;count&#39;).last(timeframe) operator #&#x60; -
   * **&#x60;search&#x60;** free text search string for querying processes. Matching processes match
   * results on the [Live
   * Processes](https://docs.datadoghq.com/infrastructure/process/?tab&#x3D;linuxwindows) page. -
   * **&#x60;tags&#x60;** one or more tags (comma-separated) - **&#x60;timeframe&#x60;** the
   * timeframe to roll up the counts. Examples: 10m, 4h. Supported timeframes: s, m, h and d -
   * **&#x60;operator&#x60;** &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;&#x3D;, or !&#x3D; -
   * **&#x60;#&#x60;** an integer or decimal number used to set the threshold **Logs Alert Query**
   * Example: &#x60;logs(query).index(index_name).rollup(rollup_method[, measure]).last(time_window)
   * operator #&#x60; - **&#x60;query&#x60;** The search query - following the [Log search
   * syntax](https://docs.datadoghq.com/logs/search_syntax/). - **&#x60;index_name&#x60;** For
   * multi-index organizations, the log index in which the request is performed. -
   * **&#x60;rollup_method&#x60;** The stats roll-up method - supports &#x60;count&#x60;,
   * &#x60;avg&#x60; and &#x60;cardinality&#x60;. - **&#x60;measure&#x60;** For &#x60;avg&#x60; and
   * cardinality &#x60;rollup_method&#x60; - specify the measure or the facet name you want to use.
   * - **&#x60;time_window&#x60;** #m (between 1 and 2880), #h (between 1 and 48). -
   * **&#x60;operator&#x60;** &#x60;&lt;&#x60;, &#x60;&lt;&#x3D;&#x60;, &#x60;&gt;&#x60;,
   * &#x60;&gt;&#x3D;&#x60;, &#x60;&#x3D;&#x3D;&#x60;, or &#x60;!&#x3D;&#x60;. - **&#x60;#&#x60;**
   * an integer or decimal number used to set the threshold. **Composite Query** Example:
   * &#x60;12345 &amp;&amp; 67890&#x60;, where &#x60;12345&#x60; and &#x60;67890&#x60; are the IDs
   * of non-composite monitors * **&#x60;name&#x60;** [*required*, *default* &#x3D; **dynamic, based
   * on query**]: The name of the alert. * **&#x60;message&#x60;** [*required*, *default* &#x3D;
   * **dynamic, based on query**]: A message to include with notifications for this monitor. Email
   * notifications can be sent to specific users by using the same &#39;@username&#39; notation as
   * events. * **&#x60;tags&#x60;** [*optional*, *default* &#x3D; **empty list**]: A list of tags to
   * associate with your monitor. When getting all monitor details via the API, use the
   * &#x60;monitor_tags&#x60; argument to filter results by these tags. It is only available via the
   * API and isn&#39;t visible or editable in the Datadog UI. **SLO Alert Query** Example:
   * &#x60;error_budget(\&quot;slo_id\&quot;).over(\&quot;time_window\&quot;) operator #&#x60; -
   * **&#x60;slo_id&#x60;**: The alphanumeric SLO ID of the SLO you are configuring the alert for. -
   * **&#x60;time_window&#x60;**: The time window of the SLO target you wish to alert on. Valid
   * options: &#x60;7d&#x60;, &#x60;30d&#x60;, &#x60;90d&#x60;. - **&#x60;operator&#x60;**:
   * &#x60;&gt;&#x3D;&#x60; or &#x60;&gt;&#x60; **Audit Alert Query** Example:
   * &#x60;audits(query).rollup(rollup_method[, measure]).last(time_window) operator #&#x60; -
   * **&#x60;query&#x60;** The search query - following the [Log search
   * syntax](https://docs.datadoghq.com/logs/search_syntax/). - **&#x60;rollup_method&#x60;** The
   * stats roll-up method - supports &#x60;count&#x60;, &#x60;avg&#x60; and &#x60;cardinality&#x60;.
   * - **&#x60;measure&#x60;** For &#x60;avg&#x60; and cardinality &#x60;rollup_method&#x60; -
   * specify the measure or the facet name you want to use. - **&#x60;time_window&#x60;** #m
   * (between 1 and 2880), #h (between 1 and 48). - **&#x60;operator&#x60;** &#x60;&lt;&#x60;,
   * &#x60;&lt;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;&gt;&#x3D;&#x60;, &#x60;&#x3D;&#x3D;&#x60;, or
   * &#x60;!&#x3D;&#x60;. - **&#x60;#&#x60;** an integer or decimal number used to set the
   * threshold. **NOTE** Only available on US1-FED and in closed beta on US1, EU, US3, and US5.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void createMonitorTest() throws ApiException {
    // Monitor body = null;
    // Monitor response = api.createMonitor()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Delete a monitor
   *
   * <p>Delete the specified monitor
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void deleteMonitorTest() throws ApiException {
    // Long monitorId = null;
    // String force = null;
    // DeletedMonitor response = api.deleteMonitor(monitorId)
    //        .force(force)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a monitor&#39;s details
   *
   * <p>Get details about the specified monitor from your organization.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getMonitorTest() throws ApiException {
    // Long monitorId = null;
    // String groupStates = null;
    // Monitor response = api.getMonitor(monitorId)
    //        .groupStates(groupStates)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get all monitor details
   *
   * <p>Get details about the specified monitor from your organization.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listMonitorsTest() throws ApiException {
    // String groupStates = null;
    // String name = null;
    // String tags = null;
    // String monitorTags = null;
    // Boolean withDowntimes = null;
    // Long idOffset = null;
    // Long page = null;
    // Integer pageSize = null;
    // List<Monitor> response = api.listMonitors()
    //        .groupStates(groupStates)
    //        .name(name)
    //        .tags(tags)
    //        .monitorTags(monitorTags)
    //        .withDowntimes(withDowntimes)
    //        .idOffset(idOffset)
    //        .page(page)
    //        .pageSize(pageSize)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Monitors group search
   *
   * <p>Search and filter your monitor groups details.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void searchMonitorGroupsTest() throws ApiException {
    // String query = null;
    // Long page = null;
    // Long perPage = null;
    // String sort = null;
    // MonitorGroupSearchResponse response = api.searchMonitorGroups()
    //        .query(query)
    //        .page(page)
    //        .perPage(perPage)
    //        .sort(sort)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Monitors search
   *
   * <p>Search and filter your monitors details.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void searchMonitorsTest() throws ApiException {
    // String query = null;
    // Long page = null;
    // Long perPage = null;
    // String sort = null;
    // MonitorSearchResponse response = api.searchMonitors()
    //        .query(query)
    //        .page(page)
    //        .perPage(perPage)
    //        .sort(sort)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Edit a monitor
   *
   * <p>Edit the specified monitor.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void updateMonitorTest() throws ApiException {
    // Long monitorId = null;
    // MonitorUpdateRequest body = null;
    // Monitor response = api.updateMonitor(monitorId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Validate a monitor
   *
   * <p>Validate the monitor provided in the request.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void validateMonitorTest() throws ApiException {
    // Monitor body = null;
    // Object response = api.validateMonitor()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }
}
