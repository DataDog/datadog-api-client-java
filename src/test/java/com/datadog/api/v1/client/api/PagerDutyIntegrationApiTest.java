/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.datadog.api.v1.client.api;

import com.datadog.api.TestUtils;
import com.datadog.api.v1.client.ApiException;
import com.datadog.api.v1.client.ApiResponse;
import com.datadog.api.v1.client.model.PagerDutyIntegration;
import com.datadog.api.v1.client.model.PagerDutyService;
import com.datadog.api.v1.client.model.PagerDutyServiceKey;
import com.datadog.api.v1.client.model.PagerDutyServicesAndSchedules;
import org.junit.After;
import org.junit.BeforeClass;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

/**
 * API tests for PagerDutyIntegrationApi
 */
public class PagerDutyIntegrationApiTest extends V1ApiTest {

    private static PagerDutyIntegrationApi api;

    @BeforeClass
    public static void initAPI() {
        api = new PagerDutyIntegrationApi(generalApiClient);
    }

    @After
    public void removeIntegration() {
        try {
            api.deletePagerDutyIntegration().execute();
        } catch (ApiException e) {
            System.out.println(String.format("Problem with removing PagerDuty integration: %s", e));
        }
    }

    /**
     * Make sure that there is not parallel execution.
     *
     * @throws TestUtils.RetryException
     */
    protected void ensureNoPagerDuty() throws TestUtils.RetryException {
        TestUtils.retry(5, 10, () -> {
            try {
                api.getPagerDutyIntegration().execute();
            } catch (ApiException e) {
                // integration does not exist
                return true;
            }
            // wait until other test finish
            return false;
        });
    }

    /**
     * Test a PagerDuty integration lifecycle
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lifecyclePagerDutyIntegrationTest() throws ApiException, TestUtils.RetryException {
        ensureNoPagerDuty();

        PagerDutyIntegration body = new PagerDutyIntegration()
                .subdomain("_deadbeef")
                .apiToken("y_NbAkKc66ryYTWUXYEu");

        // Create a new PagerDuty integration
        ApiResponse<Void> response = api.createPagerDutyIntegration()
                .body(body)
                .executeWithHttpInfo();
        assertEquals(204, response.getStatusCode());

        // Get PagerDuty integration
        PagerDutyIntegration pagerDuty = api.getPagerDutyIntegration().execute();
        assertEquals(body.getSubdomain(), pagerDuty.getSubdomain());

        // Add a Service and Schedules items by updating the PagerDuty Integration
        PagerDutyServicesAndSchedules servicesAndSchedules = new PagerDutyServicesAndSchedules()
                .addServicesItem(new PagerDutyService()
                        .serviceName("test_java")
                        .serviceKey("deadbeef"))
                .addSchedulesItem(
                        "https://_deadbeef.pagerduty.com/schedules#DEAD3F"
                );

        api.updatePagerDutyIntegration()
                .body(servicesAndSchedules)
                .execute();

        PagerDutyIntegration updatedPagerDuty = api.getPagerDutyIntegration().execute();

        assertEquals(pagerDuty.getSubdomain(), updatedPagerDuty.getSubdomain());
        for (int index = 0; index < updatedPagerDuty.getServices().size(); index++) {
            PagerDutyService service = updatedPagerDuty.getServices().get(index);
            assertEquals(service.getServiceName(), servicesAndSchedules.getServices().get(index).getServiceName());
        }

        // Add single service object to the PagerDuty Integration
        PagerDutyService serviceBody = new PagerDutyService()
                .serviceName("test_java_2")
                .serviceKey("deadbeef");
        response = api.createPagerDutyIntegrationService().body(serviceBody).executeWithHttpInfo();
        assertEquals(201, response.getStatusCode());

        // Get created Service object
        PagerDutyService service = api.getPagerDutyIntegrationService("test_java_2").execute();
        assertEquals(serviceBody.getServiceName(), service.getServiceName());
        assertEquals(serviceBody.getServiceKey(), service.getServiceKey());

        // Get previously added service item
        service = api.getPagerDutyIntegrationService("test_java").execute();
        assertEquals("test_java", service.getServiceName());
        assertEquals("deadbeef", service.getServiceKey());

        // Update service object
        PagerDutyServiceKey serviceKey = new PagerDutyServiceKey();
        serviceKey.setServiceKey("newkey");
        api.updatePagerDutyIntegrationService("test_java_2").body(serviceKey).executeWithHttpInfo();

        // Get created Service object
        service = api.getPagerDutyIntegrationService("test_java_2").execute();
        assertEquals(serviceBody.getServiceName(), service.getServiceName());
        assertEquals(serviceKey.getServiceKey(), service.getServiceKey());

        // Delete Service Object
        ApiResponse<Void> serviceDeleteResponse = api.deletePagerDutyIntegrationService("test_java_2").executeWithHttpInfo();
        assertEquals(200, serviceDeleteResponse.getStatusCode());

        // Delete Pager Duty Integration
        ApiResponse<Void> deleteResponse = api.deletePagerDutyIntegration().executeWithHttpInfo();
        assertEquals(204, deleteResponse.getStatusCode());
    }

    /**
     * Get a PagerDuty integration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPagerDutyIntegrationTest() throws TestUtils.RetryException {
        ensureNoPagerDuty();

        try {
            api.getPagerDutyIntegration().execute();
        } catch (ApiException e) {
            assertEquals(404, e.getCode());
        }
    }
}
