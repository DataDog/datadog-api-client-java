/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.datadog.api.v1.client.api;

import com.datadog.api.v1.client.*;
import com.datadog.api.v1.client.auth.*;
import org.junit.Test;

/** API tests for NotebooksApi */
public class NotebooksApiTest {

  private final NotebooksApi api = new NotebooksApi();

  /**
   * Create a notebook
   *
   * <p>Create a notebook using the specified options.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void createNotebookTest() throws ApiException {
    // NotebookCreateRequest body = null;
    // NotebookResponse response = api.createNotebook()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Delete a notebook
   *
   * <p>Delete a notebook using the specified ID.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void deleteNotebookTest() throws ApiException {
    // Long notebookId = null;
    // api.deleteNotebook(notebookId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a notebook
   *
   * <p>Get a notebook using the specified notebook ID.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getNotebookTest() throws ApiException {
    // Long notebookId = null;
    // NotebookResponse response = api.getNotebook(notebookId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get all notebooks
   *
   * <p>Get all notebooks. This can also be used to search for notebooks with a particular
   * &#x60;query&#x60; in the notebook &#x60;name&#x60; or author &#x60;handle&#x60;.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listNotebooksTest() throws ApiException {
    // String authorHandle = null;
    // String excludeAuthorHandle = null;
    // Long start = null;
    // Long count = null;
    // String sortField = null;
    // String sortDir = null;
    // String query = null;
    // Boolean includeCells = null;
    // NotebooksResponse response = api.listNotebooks()
    //        .authorHandle(authorHandle)
    //        .excludeAuthorHandle(excludeAuthorHandle)
    //        .start(start)
    //        .count(count)
    //        .sortField(sortField)
    //        .sortDir(sortDir)
    //        .query(query)
    //        .includeCells(includeCells)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Update a notebook
   *
   * <p>Update a notebook using the specified ID.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void updateNotebookTest() throws ApiException {
    // Long notebookId = null;
    // NotebookUpdateRequest body = null;
    // NotebookResponse response = api.updateNotebook(notebookId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }
}
