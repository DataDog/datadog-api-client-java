/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.v1.client.api;

import com.datadog.api.v1.client.ApiException;
import com.datadog.api.v1.client.api.V1ApiTest;
import com.datadog.api.v1.client.model.Error400;
import com.datadog.api.v1.client.model.Error403;
import com.datadog.api.v1.client.model.HostMuteResponse;
import com.datadog.api.v1.client.model.LogsExclusion;
import com.datadog.api.v1.client.model.LogsExclusionFilter;
import com.datadog.api.v1.client.model.LogsIndex;
import com.datadog.api.v1.client.model.LogsIndexFilter;
import com.datadog.api.v1.client.model.LogsIndexesOrder;
import com.datadog.api.v1.client.model.LogsIndexesResponse;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LogsIndexesApi
 */
public class LogsIndexesApiTest extends V1ApiTest {

    private static LogsIndexesApi api;

    @BeforeClass
    public static void initApi() {
        api = new LogsIndexesApi(generalApiClient);
    }

    /**
     * This endpoint returns an array of the LogIndex objects of your organization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllLogIndexesTest() throws ApiException {
        LogsIndexesResponse response = api.getAllLogIndexes()
                .execute();
        assertTrue(0 < response.getIndexes().size());
    }

    /**
     * This endpoint returns an Index identified by its name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogsIndexTest() throws ApiException {
        String name = "main";
        LogsIndex response = api.getLogsIndex(name)
                .execute();
        assertEquals(name, response.getName());
        assertEquals("", response.getFilter().getQuery());
        assertEquals(0, response.getExclusionFilters().size());
    }

    /**
     * Get the current order of your log indexes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLogsIndexOrderTest() throws ApiException {
        LogsIndexesOrder response = api.getLogsIndexOrder()
                .execute();
        assertTrue(0 < response.getIndexNames().size());
        assertTrue(response.getIndexNames().contains("main"));
    }

    /**
     * This endpoint updates an Index identified by its name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLogsIndexTest() throws ApiException {
        String name = "main";
        List<LogsExclusion> exclusionFilters = new ArrayList<LogsExclusion>();
        LogsExclusion exclusion = new LogsExclusion()
            // .name(String.format("datadog-api-client-java::%d", System.currentTimeMillis()))
            .name("test")
            .isEnabled(false)
            .filter(new LogsExclusionFilter().query("*").samplingRate(1.0));
            /*
            .isEnabled(false)
            .filter(
                new LogsExclusionFilter().query("host:datadog-api-client-java").samplingRate(1.0)
            );
            */
        exclusionFilters.add(exclusion);

        LogsIndex orig = api.getLogsIndex(name).execute();
        LogsIndex body = new LogsIndex()
            .filter(new LogsIndexFilter().query(""))
            .exclusionFilters(exclusionFilters);
        LogsIndex response = api.updateLogsIndex(name)
                .body(body)
                .execute();
        assertEquals(body.getExclusionFilters(), response.getExclusionFilters());
    }

    /**
     * Update the order of your log indexes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLogsIndexOrderTest() throws ApiException {
        // Get current index order
        LogsIndexesOrder body = api.getLogsIndexOrder().execute();
        List<String> names = body.getIndexNames();

        // Slightly change order
        List<String> newOrder = new ArrayList<>(names);
        newOrder.add(newOrder.get(0));
        newOrder.remove(0);
        body.setIndexNames(newOrder);

        LogsIndexesOrder response = api.updateLogsIndexOrder()
                .body(body)
                .execute();
        assertEquals(body.getIndexNames(), response.getIndexNames());
    }

}
