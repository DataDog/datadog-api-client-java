/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.datadog.api.v2.client.api;

import com.datadog.api.v2.client.*;
import com.datadog.api.v2.client.auth.*;
import org.junit.Test;

/** API tests for SecurityMonitoringApi */
public class SecurityMonitoringApiTest {

  private final SecurityMonitoringApi api = new SecurityMonitoringApi();

  /**
   * Create a security filter
   *
   * <p>Create a security filter. See the [security filter
   * guide](https://docs.datadoghq.com/security_platform/guide/how-to-setup-security-filters-using-security-monitoring-api/)
   * for more examples.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void createSecurityFilterTest() throws ApiException {
    // SecurityFilterCreateRequest body = null;
    // SecurityFilterResponse response = api.createSecurityFilter()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Create a detection rule
   *
   * <p>Create a detection rule.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void createSecurityMonitoringRuleTest() throws ApiException {
    // SecurityMonitoringRuleCreatePayload body = null;
    // SecurityMonitoringRuleResponse response = api.createSecurityMonitoringRule()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Delete a security filter
   *
   * <p>Delete a specific security filter.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void deleteSecurityFilterTest() throws ApiException {
    // String securityFilterId = null;
    // api.deleteSecurityFilter(securityFilterId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Delete an existing rule
   *
   * <p>Delete an existing rule. Default rules cannot be deleted.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void deleteSecurityMonitoringRuleTest() throws ApiException {
    // String ruleId = null;
    // api.deleteSecurityMonitoringRule(ruleId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a security filter
   *
   * <p>Get the details of a specific security filter. See the [security filter
   * guide](https://docs.datadoghq.com/security_platform/guide/how-to-setup-security-filters-using-security-monitoring-api/)
   * for more examples.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getSecurityFilterTest() throws ApiException {
    // String securityFilterId = null;
    // SecurityFilterResponse response = api.getSecurityFilter(securityFilterId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a rule&#39;s details
   *
   * <p>Get a rule&#39;s details.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getSecurityMonitoringRuleTest() throws ApiException {
    // String ruleId = null;
    // SecurityMonitoringRuleResponse response = api.getSecurityMonitoringRule(ruleId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get all security filters
   *
   * <p>Get the list of configured security filters with their definitions.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listSecurityFiltersTest() throws ApiException {
    // SecurityFiltersResponse response = api.listSecurityFilters()
    //        .execute();
    // TODO: test validations
  }

  /**
   * List rules
   *
   * <p>List rules.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listSecurityMonitoringRulesTest() throws ApiException {
    // Long pageSize = null;
    // Long pageNumber = null;
    // SecurityMonitoringListRulesResponse response = api.listSecurityMonitoringRules()
    //        .pageSize(pageSize)
    //        .pageNumber(pageNumber)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a quick list of security signals
   *
   * <p>The list endpoint returns security signals that match a search query. Both this endpoint and
   * the POST endpoint can be used interchangeably when listing security signals.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listSecurityMonitoringSignalsTest() throws ApiException {
    // String filterQuery = null;
    // OffsetDateTime filterFrom = null;
    // OffsetDateTime filterTo = null;
    // SecurityMonitoringSignalsSort sort = null;
    // String pageCursor = null;
    // Integer pageLimit = null;
    // SecurityMonitoringSignalsListResponse response = api.listSecurityMonitoringSignals()
    //        .filterQuery(filterQuery)
    //        .filterFrom(filterFrom)
    //        .filterTo(filterTo)
    //        .sort(sort)
    //        .pageCursor(pageCursor)
    //        .pageLimit(pageLimit)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a list of security signals
   *
   * <p>Returns security signals that match a search query. Both this endpoint and the GET endpoint
   * can be used interchangeably for listing security signals.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void searchSecurityMonitoringSignalsTest() throws ApiException {
    // SecurityMonitoringSignalListRequest body = null;
    // SecurityMonitoringSignalsListResponse response = api.searchSecurityMonitoringSignals()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Update a security filter
   *
   * <p>Update a specific security filter. Returns the security filter object when the request is
   * successful.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void updateSecurityFilterTest() throws ApiException {
    // String securityFilterId = null;
    // SecurityFilterUpdateRequest body = null;
    // SecurityFilterResponse response = api.updateSecurityFilter(securityFilterId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Update an existing rule
   *
   * <p>Update an existing rule. When updating &#x60;cases&#x60;, &#x60;queries&#x60; or
   * &#x60;options&#x60;, the whole field must be included. For example, when modifying a query all
   * queries must be included. Default rules can only be updated to be enabled and to change
   * notifications.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void updateSecurityMonitoringRuleTest() throws ApiException {
    // String ruleId = null;
    // SecurityMonitoringRuleUpdatePayload body = null;
    // SecurityMonitoringRuleResponse response = api.updateSecurityMonitoringRule(ruleId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }
}
