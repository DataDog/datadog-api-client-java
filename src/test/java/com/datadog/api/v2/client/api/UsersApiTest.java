/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.datadog.api.v2.client.api;

import com.datadog.api.v2.client.*;
import com.datadog.api.v2.client.auth.*;
import org.junit.Test;

/** API tests for UsersApi */
public class UsersApiTest {

  private final UsersApi api = new UsersApi();

  /**
   * Create a service account
   *
   * <p>Create a service account for your organization.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void createServiceAccountTest() throws ApiException {
    // ServiceAccountCreateRequest body = null;
    // UserResponse response = api.createServiceAccount()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Create a user
   *
   * <p>Create a user for your organization.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void createUserTest() throws ApiException {
    // UserCreateRequest body = null;
    // UserResponse response = api.createUser()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Disable a user
   *
   * <p>Disable a user. Can only be used with an application key belonging to an administrator user.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void disableUserTest() throws ApiException {
    // String userId = null;
    // api.disableUser(userId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a user invitation
   *
   * <p>Returns a single user invitation by its UUID.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getInvitationTest() throws ApiException {
    // String userInvitationUuid = null;
    // UserInvitationResponse response = api.getInvitation(userInvitationUuid)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get user details
   *
   * <p>Get a user in the organization specified by the user’s &#x60;user_id&#x60;.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getUserTest() throws ApiException {
    // String userId = null;
    // UserResponse response = api.getUser(userId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a user organization
   *
   * <p>Get a user organization. Returns the user information and all organizations joined by this
   * user.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listUserOrganizationsTest() throws ApiException {
    // String userId = null;
    // UserResponse response = api.listUserOrganizations(userId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a user permissions
   *
   * <p>Get a user permission set. Returns a list of the user’s permissions granted by the
   * associated user&#39;s roles.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listUserPermissionsTest() throws ApiException {
    // String userId = null;
    // PermissionsResponse response = api.listUserPermissions(userId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * List all users
   *
   * <p>Get the list of all users in the organization. This list includes all users even if they are
   * deactivated or unverified.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listUsersTest() throws ApiException {
    // Long pageSize = null;
    // Long pageNumber = null;
    // String sort = null;
    // QuerySortOrder sortDir = null;
    // String filter = null;
    // String filterStatus = null;
    // UsersResponse response = api.listUsers()
    //        .pageSize(pageSize)
    //        .pageNumber(pageNumber)
    //        .sort(sort)
    //        .sortDir(sortDir)
    //        .filter(filter)
    //        .filterStatus(filterStatus)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Send invitation emails
   *
   * <p>Sends emails to one or more users inviting them to join the organization.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void sendInvitationsTest() throws ApiException {
    // UserInvitationsRequest body = null;
    // UserInvitationsResponse response = api.sendInvitations()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Update a user
   *
   * <p>Edit a user. Can only be used with an application key belonging to an administrator user.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void updateUserTest() throws ApiException {
    // String userId = null;
    // UserUpdateRequest body = null;
    // UserResponse response = api.updateUser(userId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }
}
