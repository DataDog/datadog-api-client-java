/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.v2.client.api;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;

import com.datadog.api.RecordingMode;
import com.datadog.api.TestUtils;
import com.datadog.api.v2.client.ApiException;
import com.datadog.api.v2.client.model.LogsListPayload;
import com.datadog.api.v2.client.model.LogsListPayloadFilter;
import com.datadog.api.v2.client.model.LogsListPayloadPage;
import com.datadog.api.v2.client.model.LogsListResponse;
import com.datadog.api.v2.client.model.LogsSort;
import java.net.URLEncoder;
import java.time.Duration;
import javax.ws.rs.core.GenericType;
import org.junit.Before;
import org.junit.Test;

@SuppressWarnings("ConstantConditions")
public class LogsApiTest extends V2APITest {

    private static LogsApi api;

    @Before
    public void setup() {
        api = new LogsApi(generalApiClient);
    }

    private void sendLogs(String suffix) throws ApiException, InterruptedException {
        long nowNano = now.toEpochSecond() * 1000000 + now.getNano();
        String source = String.format("java-client-test-%d", nowNano);
        String message = String.format("test-log-list %s", suffix);
        String secondMessage = String.format("test-log-list-2 %s", suffix);
        String hostname = getUniqueEntityName();

        String intakeURL = "https://http-intake.logs.datadoghq.com/v1/input";
        if (TestUtils.getRecordingMode().equals(RecordingMode.MODE_REPLAYING)) {
            // when running from cassettes, we need to make sure that the default base URL
            // is used for mock server certificates to work properly
            intakeURL = "/v1/input";
        }
        sendRequest(
            "POST",
            intakeURL,
            String.format(
                    "{\"ddsource\":\"%s\",\"ddtags\":\"java,test,list\",\"hostname\":\"%s\",\"message\":\"{\\\"timestamp\\\": %d, \\\"message\\\": \\\"%s\\\"}\"}",
                    source, hostname, (now.toEpochSecond() - 1000) * 1000, message
            ),
            new GenericType<String>(String.class)
        );
        sendRequest(
                "POST",
                intakeURL,
                String.format(
                        "{\"ddsource\":\"%s\",\"ddtags\":\"java,test,list\",\"hostname\":\"%s\",\"message\":\"{\\\"timestamp\\\": %d, \\\"message\\\": \\\"%s\\\"}\"}",
                        source, hostname, (now.toEpochSecond() - 1) * 1000, secondMessage
                ),
                new GenericType<String>(String.class)
        );
    }

    @Test
    public void listLogsTest() throws Exception {
        String suffix = "post-" + now.toEpochSecond();
        sendLogs(suffix);

        LogsListPayloadFilter allLogsFilter = new LogsListPayloadFilter()
                .query(suffix)
                .from(now.minus(Duration.ofHours(1)))
                .to(now.plus(Duration.ofHours(1)));

        // Make sure both logs are indexed
        LogsListPayload bothMessagesPayload = new LogsListPayload()
                .filter(allLogsFilter);
        TestUtils.retry(10, 10, () -> {
            try {
                LogsListResponse response = api.listLogs().body(bothMessagesPayload).execute();
                return response.getData() != null && response.getData().size() == 2;
            } catch (ApiException ignored) {
                return false;
            }
        });

        // Sort works correctly
        LogsListResponse responseAscending = api.listLogs()
                .body(new LogsListPayload()
                        .filter(allLogsFilter)
                        .sort(LogsSort.TIMESTAMP_ASCENDING))
                .execute();

        assertEquals(2, responseAscending.getData().size());
        assertEquals("test-log-list " + suffix, responseAscending.getData().get(0).getContent().getMessage());
        assertEquals("test-log-list-2 " + suffix, responseAscending.getData().get(1).getContent().getMessage());

        LogsListResponse responseDescending = api.listLogs()
                .body(new LogsListPayload()
                        .filter(allLogsFilter)
                        .sort(LogsSort.TIMESTAMP_DESCENDING))
                .execute();

        assertEquals(2, responseDescending.getData().size());
        assertEquals("test-log-list-2 " + suffix, responseDescending.getData().get(0).getContent().getMessage());
        assertEquals("test-log-list " + suffix, responseDescending.getData().get(1).getContent().getMessage());

        // Paging
        LogsListResponse pageOneResponse = api.listLogs()
                .body(new LogsListPayload()
                        .filter(allLogsFilter)
                        .page(new LogsListPayloadPage().limit(1)))
                .execute();
        assertEquals(1, pageOneResponse.getData().size());

        String cursor = pageOneResponse.getMeta().getPage().getAfter();
        assertTrue(pageOneResponse.getLinks().getNext().contains(URLEncoder.encode(cursor)));

        LogsListResponse pageTwoResponse = api.listLogs()
                .body(new LogsListPayload()
                        .filter(allLogsFilter)
                        .page(new LogsListPayloadPage()
                                .cursor(cursor)
                                .limit(1)))
                .execute();
        assertEquals(1, pageTwoResponse.getData().size());

        assertNotEquals(pageOneResponse.getData().get(0).getId(), pageTwoResponse.getData().get(0).getId());
    }

    @Test
    public void listLogsGetTest() throws Exception {
        String suffix = "get-" + now.toEpochSecond();
        sendLogs(suffix);

        // Make sure both logs are indexed
        TestUtils.retry(5, 10, () -> {
            try {
                LogsListResponse response = api.listLogsGet()
                        .filterQuery(suffix)
                        .filterFrom(now.minus(Duration.ofHours(1)))
                        .filterTo(now.plus(Duration.ofHours(1)))
                        .execute();
                return response.getData() != null && response.getData().size() == 2;
            } catch (ApiException ignored) {
                return false;
            }
        });

        // Sort works correctly
        LogsListResponse responseAscending = api.listLogsGet()
                .filterQuery(suffix)
                .filterFrom(now.minus(Duration.ofHours(1)))
                .filterTo(now.plus(Duration.ofHours(1)))
                .sort(LogsSort.TIMESTAMP_ASCENDING)
                .execute();

        assertEquals(2, responseAscending.getData().size());
        assertEquals("test-log-list " + suffix, responseAscending.getData().get(0).getContent().getMessage());
        assertEquals("test-log-list-2 " + suffix, responseAscending.getData().get(1).getContent().getMessage());

        LogsListResponse responseDescending = api.listLogsGet()
                .filterQuery(suffix)
                .filterFrom(now.minus(Duration.ofHours(1)))
                .filterTo(now.plus(Duration.ofHours(1)))
                .sort(LogsSort.TIMESTAMP_DESCENDING)
                .execute();

        assertEquals(2, responseDescending.getData().size());
        assertEquals("test-log-list-2 " + suffix, responseDescending.getData().get(0).getContent().getMessage());
        assertEquals("test-log-list " + suffix, responseDescending.getData().get(1).getContent().getMessage());

        // Paging
        LogsListResponse pageOneResponse = api.listLogsGet()
                .filterQuery(suffix)
                .filterFrom(now.minus(Duration.ofHours(1)))
                .filterTo(now.plus(Duration.ofHours(1)))
                .pageLimit(1)
                .execute();

        assertEquals(1, pageOneResponse.getData().size());

        String cursor = pageOneResponse.getMeta().getPage().getAfter();
        assertTrue(pageOneResponse.getLinks().getNext().contains(URLEncoder.encode(cursor)));

        LogsListResponse pageTwoResponse = api.listLogsGet()
                .filterQuery(suffix)
                .filterFrom(now.minus(Duration.ofHours(1)))
                .filterTo(now.plus(Duration.ofHours(1)))
                .pageLimit(1)
                .pageCursor(cursor)
                .execute();

        assertEquals(1, pageTwoResponse.getData().size());

        assertNotEquals(pageOneResponse.getData().get(0).getId(), pageTwoResponse.getData().get(0).getId());
    }

}
