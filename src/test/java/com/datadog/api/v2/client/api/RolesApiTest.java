/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.datadog.api.v2.client.api;

import com.datadog.api.v2.client.*;
import com.datadog.api.v2.client.auth.*;
import org.junit.Test;

/** API tests for RolesApi */
public class RolesApiTest {

  private final RolesApi api = new RolesApi();

  /**
   * Grant permission to a role
   *
   * <p>Adds a permission to a role.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void addPermissionToRoleTest() throws ApiException {
    // String roleId = null;
    // RelationshipToPermission body = null;
    // PermissionsResponse response = api.addPermissionToRole(roleId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Add a user to a role
   *
   * <p>Adds a user to a role.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void addUserToRoleTest() throws ApiException {
    // String roleId = null;
    // RelationshipToUser body = null;
    // UsersResponse response = api.addUserToRole(roleId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Create role
   *
   * <p>Create a new role for your organization.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void createRoleTest() throws ApiException {
    // RoleCreateRequest body = null;
    // RoleCreateResponse response = api.createRole()
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Delete role
   *
   * <p>Disables a role.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void deleteRoleTest() throws ApiException {
    // String roleId = null;
    // api.deleteRole(roleId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get a role
   *
   * <p>Get a role in the organization specified by the roleâ€™s &#x60;role_id&#x60;.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getRoleTest() throws ApiException {
    // String roleId = null;
    // RoleResponse response = api.getRole(roleId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * List permissions
   *
   * <p>Returns a list of all permissions, including name, description, and ID.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listPermissionsTest() throws ApiException {
    // PermissionsResponse response = api.listPermissions()
    //        .execute();
    // TODO: test validations
  }

  /**
   * List permissions for a role
   *
   * <p>Returns a list of all permissions for a single role.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listRolePermissionsTest() throws ApiException {
    // String roleId = null;
    // PermissionsResponse response = api.listRolePermissions(roleId)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Get all users of a role
   *
   * <p>Gets all users of a role.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listRoleUsersTest() throws ApiException {
    // String roleId = null;
    // Long pageSize = null;
    // Long pageNumber = null;
    // String sort = null;
    // String filter = null;
    // UsersResponse response = api.listRoleUsers(roleId)
    //        .pageSize(pageSize)
    //        .pageNumber(pageNumber)
    //        .sort(sort)
    //        .filter(filter)
    //        .execute();
    // TODO: test validations
  }

  /**
   * List roles
   *
   * <p>Returns all roles, including their names and IDs.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void listRolesTest() throws ApiException {
    // Long pageSize = null;
    // Long pageNumber = null;
    // RolesSort sort = null;
    // String filter = null;
    // RolesResponse response = api.listRoles()
    //        .pageSize(pageSize)
    //        .pageNumber(pageNumber)
    //        .sort(sort)
    //        .filter(filter)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Revoke permission
   *
   * <p>Removes a permission from a role.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void removePermissionFromRoleTest() throws ApiException {
    // String roleId = null;
    // RelationshipToPermission body = null;
    // PermissionsResponse response = api.removePermissionFromRole(roleId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Remove a user from a role
   *
   * <p>Removes a user from a role.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void removeUserFromRoleTest() throws ApiException {
    // String roleId = null;
    // RelationshipToUser body = null;
    // UsersResponse response = api.removeUserFromRole(roleId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }

  /**
   * Update a role
   *
   * <p>Edit a role. Can only be used with application keys belonging to administrators.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void updateRoleTest() throws ApiException {
    // String roleId = null;
    // RoleUpdateRequest body = null;
    // RoleUpdateResponse response = api.updateRole(roleId)
    //        .body(body)
    //        .execute();
    // TODO: test validations
  }
}
