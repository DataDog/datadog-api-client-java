/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.datadog.api.v2.client.api;

import static org.junit.Assert.*;

import com.datadog.api.v2.client.ApiException;
import com.datadog.api.v2.client.model.*;
import java.util.ArrayList;
import org.junit.*;

/** API tests for RolesApi */
public class RolesApiTest extends V2APITest {

  private static RolesApi api;
  private static UsersApi usersApi;
  private ArrayList<String> disableUsers = null;
  private ArrayList<String> deleteRoles = null;
  private final String testingUserName = "Test Datadog Client Java";
  private final String testingUserTitle = "Big boss";

  @Override
  public String getTracingEndpoint() {
    return "roles";
  }

  @BeforeClass
  public static void initApi() {
    api = new RolesApi(generalApiClient);
    usersApi = new UsersApi(generalApiClient);
  }

  @Before
  public void resetResources() {
    deleteRoles = new ArrayList<String>();
    disableUsers = new ArrayList<String>();
  }

  @After
  public void deleteRoles() {
    if (deleteRoles != null) {
      for (String id : deleteRoles) {
        try {
          api.deleteRole(id);
        } catch (ApiException e) {
          System.err.println("Role was already deleted: " + id);
        }
      }
    }
  }

  @After
  public void disableUsers() throws ApiException {
    if (disableUsers != null) {
      for (String id : disableUsers) {
        UserResponse urp = usersApi.getUser(id);
        if (!urp.getData().getAttributes().getDisabled()) {
          usersApi.disableUser(id);
        }
      }
    }
  }

  @Test
  public void testRoleLifecycle() throws ApiException {
    final String testingRoleName = getUniqueEntityName();
    RoleCreateAttributes rca = new RoleCreateAttributes().name(testingRoleName);
    RoleCreateData rcd = new RoleCreateData().attributes(rca);
    RoleCreateRequest rcr = new RoleCreateRequest().data(rcd);

    // first, test creating a role
    RoleCreateResponse rr = api.createRole(rcr);
    String rid = rr.getData().getId();
    deleteRoles.add(rid);

    assertEquals(testingRoleName, rr.getData().getAttributes().getName());

    // now, test updating it
    String updatedRoleName = testingRoleName + "-updated";
    RoleUpdateAttributes rua = new RoleUpdateAttributes().name(updatedRoleName);
    RoleUpdateData rud = new RoleUpdateData().attributes(rua).id(rid);
    RoleUpdateRequest rur = new RoleUpdateRequest().data(rud);

    RoleUpdateResponse urr = api.updateRole(rid, rur);
    assertEquals(updatedRoleName, urr.getData().getAttributes().getName());

    // now, test getting it
    RoleResponse grr = api.getRole(rid);
    assertEquals(updatedRoleName, grr.getData().getAttributes().getName());

    // now, test filtering for it in the list call
    RolesResponse rsr =
        api.listRoles(
            new RolesApi.ListRolesOptionalParameters()
                .filter(updatedRoleName)
                .pageSize(1L)
                .pageNumber(0L)
                .sort(RolesSort.MODIFIED_AT_DESCENDING));
    assertEquals(1, rsr.getData().size());
    assertEquals(updatedRoleName, rsr.getData().get(0).getAttributes().getName());
    assertTrue(rsr.getMeta().getPage().getTotalCount() >= 1);
    assertTrue(rsr.getMeta().getPage().getTotalFilteredCount() >= 1);

    // now, test deleting it
    // no response payload
    api.deleteRole(rid);
  }

  @Test
  public void testRolePermissionsLifecycle() throws ApiException {
    final String testingRoleName = getUniqueEntityName();
    RoleCreateAttributes rca = new RoleCreateAttributes().name(testingRoleName);
    RoleCreateData rcd = new RoleCreateData().attributes(rca);
    RoleCreateRequest rcr = new RoleCreateRequest().data(rcd);

    // first, create a role
    RoleCreateResponse rr = api.createRole(rcr);
    String rid = rr.getData().getId();
    deleteRoles.add(rid);

    // find a permission
    PermissionsResponse permissions = api.listPermissions();
    assertTrue(permissions.getData().size() > 0);

    Permission permission = permissions.getData().get(0);
    String pid = permission.getId();

    // add a permission to the role
    RelationshipToPermissionData rtpd = new RelationshipToPermissionData().id(pid);
    RelationshipToPermission rtp = new RelationshipToPermission().data(rtpd);

    PermissionsResponse crrtps = api.addPermissionToRole(rid, rtp);
    boolean found = false;
    for (Permission p : crrtps.getData()) {
      if (pid.equals(p.getId())) {
        found = true;
        break;
      }
    }
    assertTrue(found);

    // get all permissions for the role
    PermissionsResponse lrrtps = api.listRolePermissions(rid);
    found = false;
    for (Permission p : lrrtps.getData()) {
      if (pid.equals(p.getId())) {
        found = true;
        break;
      }
    }
    assertTrue(found);

    // remove the permission from the role
    PermissionsResponse drrtps = api.removePermissionFromRole(rid, rtp);
    found = false;
    for (Permission p : drrtps.getData()) {
      if (pid.equals(p.getId())) {
        found = true;
        break;
      }
    }
    assertFalse(found);
  }

  @Test
  public void testRoleUsersLifecycle() throws ApiException {
    final String testingRoleName = getUniqueEntityName();
    RoleCreateAttributes rca = new RoleCreateAttributes().name(testingRoleName);
    RoleCreateData rcd = new RoleCreateData().attributes(rca);
    RoleCreateRequest rcp = new RoleCreateRequest().data(rcd);

    // first, create a role
    RoleCreateResponse rr = api.createRole(rcp);
    String rid = rr.getData().getId();
    deleteRoles.add(rid);

    // create a user
    final String testingUserHandle = getUniqueEntityName() + "@datadoghq.com";
    UserCreateAttributes uca =
        new UserCreateAttributes()
            .email(testingUserHandle)
            .name(testingUserName)
            .title(testingUserTitle);
    UserCreateData ucd = new UserCreateData().attributes(uca);
    UserCreateRequest ucr = new UserCreateRequest().data(ucd);
    UserResponse ur = usersApi.createUser(ucr);
    String uid = ur.getData().getId();
    disableUsers.add(uid);

    // add a user to the role
    RelationshipToUserData rtud = new RelationshipToUserData().id(uid);
    RelationshipToUser rtu = new RelationshipToUser().data(rtud);

    UsersResponse crrtus = api.addUserToRole(rid, rtu);
    boolean found = false;
    for (User u : crrtus.getData()) {
      if (uid.equals(u.getId())) {
        found = true;
        break;
      }
    }
    assertTrue(found);

    // get all users for the role
    UsersResponse lrrtus = api.listRoleUsers(rid);
    found = false;
    for (User u : lrrtus.getData()) {
      if (uid.equals(u.getId())) {
        found = true;
        break;
      }
    }
    assertTrue(found);

    // remove the permission from the role
    UsersResponse drrtus = api.removeUserFromRole(rid, rtu);
    found = false;
    for (User u : drrtus.getData()) {
      if (uid.equals(u.getId())) {
        found = true;
        break;
      }
    }
    assertFalse(found);
  }

  @Test
  public void listPermissionsTest() throws ApiException {
    PermissionsResponse psr = api.listPermissions();
    assertTrue(psr.getData().size() > 0);
  }
}
