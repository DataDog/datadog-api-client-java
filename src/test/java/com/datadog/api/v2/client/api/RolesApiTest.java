/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.v2.client.api;

import com.datadog.api.v2.client.ApiException;
import com.datadog.api.v2.client.model.APIErrorResponse;
import com.datadog.api.v2.client.model.*;
import org.junit.*;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RolesApi
 */
public class RolesApiTest extends V2APITest {

    private static RolesApi api;
    private ArrayList<String> deleteRoles = null;

    @BeforeClass
    public static void initApi() {
        api = new RolesApi(generalApiClient);
    }

    @Before
    public void resetDeleteRoles() {
        deleteRoles = new ArrayList<String>();
    }

    @After
    public void deleteRoles() {
        if (deleteRoles != null) {
            for (String id: deleteRoles) {
                try {
                    api.deleteRole(id).execute();
                } catch (ApiException e) {
                    System.err.println("Role was already deleted: " + id);
                }
            }
        }
    }

    public String generateRoleName() {
        return "test-datadog-client-java-" + now.toEpochSecond();
    }

    @Test
    public void testRoleLifecycle() throws ApiException {
        final String testingRoleName = generateRoleName();
        RoleCreateAttributes rca = new RoleCreateAttributes()
                .name(testingRoleName);
        RoleCreateData rcd = new RoleCreateData().attributes(rca);
        RoleCreatePayload rcp = new RoleCreatePayload().data(rcd);

        // first, test creating a role
        RoleResponse rr = api.createRole().body(rcp).execute();
        String rid = rr.getData().getId();
        deleteRoles.add(rid);

        assertEquals(testingRoleName, rr.getData().getAttributes().getName());

        // now, test updating it
        String updatedRoleName = "update-" + testingRoleName;
        RoleUpdateAttributes rua = new RoleUpdateAttributes()
                .name(updatedRoleName);
        RoleUpdateData rud = new RoleUpdateData().attributes(rua).id(rid);
        RoleUpdatePayload rup = new RoleUpdatePayload().data(rud);

        RoleResponse urr = api.updateRole(rid).body(rup).execute();
        assertEquals(updatedRoleName, urr.getData().getAttributes().getName());

        // now, test getting it
        RoleResponse grr = api.getRole(rid).execute();
        assertEquals(updatedRoleName, grr.getData().getAttributes().getName());

        // now, test filtering for it in the list call
        RolesResponse rsr = api.listRoles()
                .filter(updatedRoleName)
                .pageSize(1L)
                .pageNumber(0L)
                .sort(RolesSort.MODIFIED_AT_DESCENDING)
                .execute();
        assertEquals(1, rsr.getData().size());
        assertEquals(updatedRoleName, rsr.getData().get(0).getAttributes().getName());
        assertTrue(rsr.getMeta().getPage().getTotalCount() >= 1);
        assertTrue(rsr.getMeta().getPage().getTotalFilteredCount() >= 1);

        // now, test deleting it
        // no response payload
        api.deleteRole(rid);
    }

    @Test
    public void listPermissionsTest() throws ApiException {
        PermissionsResponse response = api.listPermissions()
                .execute();
        assertTrue(response.getData().size() > 0);
    }
}
