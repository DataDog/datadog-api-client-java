/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.v1.client.api;

import com.datadog.api.v1.client.*;
import com.datadog.api.v1.client.auth.*;
import com.datadog.api.v1.client.model.APIErrorResponse;
import com.datadog.api.v1.client.model.IntakePayloadAccepted;
import com.datadog.api.v1.client.model.MetricContentEncoding;
import com.datadog.api.v1.client.model.MetricMetadata;
import com.datadog.api.v1.client.model.MetricSearchResponse;
import com.datadog.api.v1.client.model.MetricsListResponse;
import com.datadog.api.v1.client.model.MetricsPayload;
import com.datadog.api.v1.client.model.MetricsQueryResponse;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetricsApi
 */
public class MetricsApiTest {

    private final MetricsApi api = new MetricsApi();

    /**
     * Get metric metadata
     *
     * Get metadata about a specific metric.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMetricMetadataTest() throws ApiException {
        //String metricName = null;
        //MetricMetadata response = api.getMetricMetadata(metricName)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get active metrics list
     *
     * Get the list of actively reporting metrics from a given time until now.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listActiveMetricsTest() throws ApiException {
        //Long from = null;
        //String host = null;
        //String tagFilter = null;
        //MetricsListResponse response = api.listActiveMetrics()
        //        .from(from)
        //        .host(host)
        //        .tagFilter(tagFilter)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Search metrics
     *
     * Search for metrics from the last 24 hours in Datadog.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMetricsTest() throws ApiException {
        //String q = null;
        //MetricSearchResponse response = api.listMetrics()
        //        .q(q)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Query timeseries points
     *
     * Query timeseries points.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryMetricsTest() throws ApiException {
        //Long from = null;
        //Long to = null;
        //String query = null;
        //MetricsQueryResponse response = api.queryMetrics()
        //        .from(from)
        //        .to(to)
        //        .query(query)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Submit metrics
     *
     * The metrics end-point allows you to post time-series data that can be graphed on Datadog’s dashboards. The maximum payload size is 3.2 megabytes (3200000 bytes). Compressed payloads must have a decompressed size of less than 62 megabytes (62914560 bytes).  If you’re submitting metrics directly to the Datadog API without using DogStatsD, expect:  - 64 bits for the timestamp - 32 bits for the value - 20 bytes for the metric names - 50 bytes for the timeseries - The full payload is approximately 100 bytes. However, with the DogStatsD API, compression is applied, which reduces the payload size.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitMetricsTest() throws ApiException {
        //MetricsPayload body = null;
        //MetricContentEncoding contentEncoding = null;
        //IntakePayloadAccepted response = api.submitMetrics()
        //        .body(body)
        //        .contentEncoding(contentEncoding)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Edit metric metadata
     *
     * Edit metadata of a specific metric. Find out more about [supported types](https://docs.datadoghq.com/developers/metrics).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMetricMetadataTest() throws ApiException {
        //String metricName = null;
        //MetricMetadata body = null;
        //MetricMetadata response = api.updateMetricMetadata(metricName)
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

}
