/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.v1.client.api;

import com.datadog.api.v1.client.*;
import com.datadog.api.v1.client.auth.*;
import com.datadog.api.v1.client.model.APIErrorResponse;
import com.datadog.api.v1.client.model.Dashboard;
import com.datadog.api.v1.client.model.DashboardBulkDeleteRequest;
import com.datadog.api.v1.client.model.DashboardDeleteResponse;
import com.datadog.api.v1.client.model.DashboardRestoreRequest;
import com.datadog.api.v1.client.model.DashboardSummary;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DashboardsApi
 */
public class DashboardsApiTest {

    private final DashboardsApi api = new DashboardsApi();

    /**
     * Create a new dashboard
     *
     * Create a dashboard using the specified options. When defining queries in your widgets, take note of which queries should have the &#x60;as_count()&#x60; or &#x60;as_rate()&#x60; modifiers appended. Refer to the following [documentation](https://docs.datadoghq.com/developers/metrics/type_modifiers/?tab&#x3D;count#in-application-modifiers) for more information on these modifiers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDashboardTest() throws ApiException {
        //Dashboard body = null;
        //Dashboard response = api.createDashboard()
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Delete a dashboard
     *
     * Delete a dashboard using the specified ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDashboardTest() throws ApiException {
        //String dashboardId = null;
        //DashboardDeleteResponse response = api.deleteDashboard(dashboardId)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Delete dashboards
     *
     * Delete dashboards using the specified IDs. If there are any failures, no dashboards will be deleted (partial success is not allowed).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDashboardsTest() throws ApiException {
        //DashboardBulkDeleteRequest body = null;
        //api.deleteDashboards()
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get a dashboard
     *
     * Get a dashboard using the specified ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDashboardTest() throws ApiException {
        //String dashboardId = null;
        //Dashboard response = api.getDashboard(dashboardId)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get all dashboards
     *
     * Get all dashboards.  **Note**: This query will only return custom created or cloned dashboards. This query will not return preset dashboards.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDashboardsTest() throws ApiException {
        //Boolean filterShared = null;
        //DashboardSummary response = api.listDashboards()
        //        .filterShared(filterShared)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Restore deleted dashboards
     *
     * Restore dashboards using the specified IDs. If there are any failures, no dashboards will be restored (partial success is not allowed).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restoreDashboardsTest() throws ApiException {
        //DashboardRestoreRequest body = null;
        //api.restoreDashboards()
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Update a dashboard
     *
     * Update a dashboard using the specified ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDashboardTest() throws ApiException {
        //String dashboardId = null;
        //Dashboard body = null;
        //Dashboard response = api.updateDashboard(dashboardId)
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

}
