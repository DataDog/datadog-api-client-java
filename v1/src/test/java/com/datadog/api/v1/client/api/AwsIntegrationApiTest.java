/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.v1.client.api;

import com.datadog.api.v1.client.*;
import com.datadog.api.v1.client.auth.*;
import com.datadog.api.v1.client.model.APIErrorResponse;
import com.datadog.api.v1.client.model.AWSAccount;
import com.datadog.api.v1.client.model.AWSAccountCreateResponse;
import com.datadog.api.v1.client.model.AWSAccountDeleteRequest;
import com.datadog.api.v1.client.model.AWSAccountListResponse;
import com.datadog.api.v1.client.model.AWSTagFilterCreateRequest;
import com.datadog.api.v1.client.model.AWSTagFilterDeleteRequest;
import com.datadog.api.v1.client.model.AWSTagFilterListResponse;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AwsIntegrationApi
 */
public class AwsIntegrationApiTest {

    private final AwsIntegrationApi api = new AwsIntegrationApi();

    /**
     * Create an AWS integration
     *
     * Create a Datadog-Amazon Web Services integration. Using the &#x60;POST&#x60; method updates your integration configuration by adding your new configuration to the existing one in your Datadog organization. A unique AWS Account ID for role based authentication.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAWSAccountTest() throws ApiException {
        //AWSAccount body = null;
        //AWSAccountCreateResponse response = api.createAWSAccount()
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Set an AWS tag filter
     *
     * Set an AWS tag filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAWSTagFilterTest() throws ApiException {
        //AWSTagFilterCreateRequest body = null;
        //Object response = api.createAWSTagFilter()
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Generate a new external ID
     *
     * Generate a new AWS external ID for a given AWS account ID and role name pair.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNewAWSExternalIDTest() throws ApiException {
        //AWSAccount body = null;
        //AWSAccountCreateResponse response = api.createNewAWSExternalID()
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Delete an AWS integration
     *
     * Delete a Datadog-AWS integration matching the specified &#x60;account_id&#x60; and &#x60;role_name parameters&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAWSAccountTest() throws ApiException {
        //AWSAccountDeleteRequest body = null;
        //Object response = api.deleteAWSAccount()
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Delete a tag filtering entry
     *
     * Delete a tag filtering entry.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAWSTagFilterTest() throws ApiException {
        //AWSTagFilterDeleteRequest body = null;
        //Object response = api.deleteAWSTagFilter()
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

    /**
     * List all AWS integrations
     *
     * List all Datadog-AWS integrations available in your Datadog organization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAWSAccountsTest() throws ApiException {
        //String accountId = null;
        //String roleName = null;
        //String accessKeyId = null;
        //AWSAccountListResponse response = api.listAWSAccounts()
        //        .accountId(accountId)
        //        .roleName(roleName)
        //        .accessKeyId(accessKeyId)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get all AWS tag filters
     *
     * Get all AWS tag filters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAWSTagFiltersTest() throws ApiException {
        //String accountId = null;
        //AWSTagFilterListResponse response = api.listAWSTagFilters()
        //        .accountId(accountId)
        //        .execute();
        // TODO: test validations
    }

    /**
     * List namespace rules
     *
     * List all namespace rules for a given Datadog-AWS integration. This endpoint takes no arguments.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAvailableAWSNamespacesTest() throws ApiException {
        //List<String> response = api.listAvailableAWSNamespaces()
        //        .execute();
        // TODO: test validations
    }

    /**
     * Update an AWS integration
     *
     * Update a Datadog-Amazon Web Services integration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAWSAccountTest() throws ApiException {
        //AWSAccount body = null;
        //String accountId = null;
        //String roleName = null;
        //String accessKeyId = null;
        //Object response = api.updateAWSAccount()
        //        .body(body)
        //        .accountId(accountId)
        //        .roleName(roleName)
        //        .accessKeyId(accessKeyId)
        //        .execute();
        // TODO: test validations
    }

}
