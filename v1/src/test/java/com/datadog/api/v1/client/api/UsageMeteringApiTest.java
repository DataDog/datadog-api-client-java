/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.v1.client.api;

import com.datadog.api.v1.client.*;
import com.datadog.api.v1.client.auth.*;
import com.datadog.api.v1.client.model.APIErrorResponse;
import java.time.OffsetDateTime;
import com.datadog.api.v1.client.model.UsageAnalyzedLogsResponse;
import com.datadog.api.v1.client.model.UsageAttributionResponse;
import com.datadog.api.v1.client.model.UsageAttributionSort;
import com.datadog.api.v1.client.model.UsageAttributionSupportedMetrics;
import com.datadog.api.v1.client.model.UsageAuditLogsResponse;
import com.datadog.api.v1.client.model.UsageBillableSummaryResponse;
import com.datadog.api.v1.client.model.UsageCWSResponse;
import com.datadog.api.v1.client.model.UsageCloudSecurityPostureManagementResponse;
import com.datadog.api.v1.client.model.UsageCustomReportsResponse;
import com.datadog.api.v1.client.model.UsageDBMResponse;
import com.datadog.api.v1.client.model.UsageFargateResponse;
import com.datadog.api.v1.client.model.UsageHostsResponse;
import com.datadog.api.v1.client.model.UsageIncidentManagementResponse;
import com.datadog.api.v1.client.model.UsageIndexedSpansResponse;
import com.datadog.api.v1.client.model.UsageIngestedSpansResponse;
import com.datadog.api.v1.client.model.UsageIoTResponse;
import com.datadog.api.v1.client.model.UsageLambdaResponse;
import com.datadog.api.v1.client.model.UsageLogsByIndexResponse;
import com.datadog.api.v1.client.model.UsageLogsByRetentionResponse;
import com.datadog.api.v1.client.model.UsageLogsResponse;
import com.datadog.api.v1.client.model.UsageNetworkFlowsResponse;
import com.datadog.api.v1.client.model.UsageNetworkHostsResponse;
import com.datadog.api.v1.client.model.UsageProfilingResponse;
import com.datadog.api.v1.client.model.UsageRumSessionsResponse;
import com.datadog.api.v1.client.model.UsageSDSResponse;
import com.datadog.api.v1.client.model.UsageSNMPResponse;
import com.datadog.api.v1.client.model.UsageSort;
import com.datadog.api.v1.client.model.UsageSortDirection;
import com.datadog.api.v1.client.model.UsageSpecifiedCustomReportsResponse;
import com.datadog.api.v1.client.model.UsageSummaryResponse;
import com.datadog.api.v1.client.model.UsageSyntheticsAPIResponse;
import com.datadog.api.v1.client.model.UsageSyntheticsBrowserResponse;
import com.datadog.api.v1.client.model.UsageSyntheticsResponse;
import com.datadog.api.v1.client.model.UsageTimeseriesResponse;
import com.datadog.api.v1.client.model.UsageTopAvgMetricsResponse;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsageMeteringApi
 */
public class UsageMeteringApiTest {

    private final UsageMeteringApi api = new UsageMeteringApi();

    /**
     * Get the list of available daily custom reports
     *
     * Get daily custom reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDailyCustomReportsTest() throws ApiException {
        //Long pageSize = null;
        //Long pageNumber = null;
        //UsageSortDirection sortDir = null;
        //UsageSort sort = null;
        //UsageCustomReportsResponse response = api.getDailyCustomReports()
        //        .pageSize(pageSize)
        //        .pageNumber(pageNumber)
        //        .sortDir(sortDir)
        //        .sort(sort)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for incident management
     *
     * Get hourly usage for incident management.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIncidentManagementTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageIncidentManagementResponse response = api.getIncidentManagement()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for ingested spans
     *
     * Get hourly usage for ingested spans.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getIngestedSpansTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageIngestedSpansResponse response = api.getIngestedSpans()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get the list of available monthly custom reports
     *
     * Get monthly custom reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMonthlyCustomReportsTest() throws ApiException {
        //Long pageSize = null;
        //Long pageNumber = null;
        //UsageSortDirection sortDir = null;
        //UsageSort sort = null;
        //UsageCustomReportsResponse response = api.getMonthlyCustomReports()
        //        .pageSize(pageSize)
        //        .pageNumber(pageNumber)
        //        .sortDir(sortDir)
        //        .sort(sort)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get specified daily custom reports
     *
     * Get specified daily custom reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecifiedDailyCustomReportsTest() throws ApiException {
        //String reportId = null;
        //UsageSpecifiedCustomReportsResponse response = api.getSpecifiedDailyCustomReports(reportId)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get specified monthly custom reports
     *
     * Get specified monthly custom reports.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecifiedMonthlyCustomReportsTest() throws ApiException {
        //String reportId = null;
        //UsageSpecifiedCustomReportsResponse response = api.getSpecifiedMonthlyCustomReports(reportId)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for analyzed logs
     *
     * Get hourly usage for analyzed logs (Security Monitoring).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageAnalyzedLogsTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageAnalyzedLogsResponse response = api.getUsageAnalyzedLogs()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get Usage Attribution
     *
     * Get Usage Attribution.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageAttributionTest() throws ApiException {
        //OffsetDateTime startMonth = null;
        //UsageAttributionSupportedMetrics fields = null;
        //OffsetDateTime endMonth = null;
        //UsageSortDirection sortDirection = null;
        //UsageAttributionSort sortName = null;
        //Boolean includeDescendants = null;
        //UsageAttributionResponse response = api.getUsageAttribution()
        //        .startMonth(startMonth)
        //        .fields(fields)
        //        .endMonth(endMonth)
        //        .sortDirection(sortDirection)
        //        .sortName(sortName)
        //        .includeDescendants(includeDescendants)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for audit logs
     *
     * Get hourly usage for audit logs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageAuditLogsTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageAuditLogsResponse response = api.getUsageAuditLogs()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get billable usage across your account
     *
     * Get billable usage across your account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageBillableSummaryTest() throws ApiException {
        //OffsetDateTime month = null;
        //UsageBillableSummaryResponse response = api.getUsageBillableSummary()
        //        .month(month)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for Cloud Workload Security
     *
     * Get hourly usage for Cloud Workload Security.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageCWSTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageCWSResponse response = api.getUsageCWS()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for CSPM
     *
     * Get hourly usage for Cloud Security Posture Management (CSPM).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageCloudSecurityPostureManagementTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageCloudSecurityPostureManagementResponse response = api.getUsageCloudSecurityPostureManagement()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for Database Monitoring
     *
     * Get hourly usage for Database Monitoring
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageDBMTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageDBMResponse response = api.getUsageDBM()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for Fargate
     *
     * Get hourly usage for [Fargate](https://docs.datadoghq.com/integrations/ecs_fargate/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageFargateTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageFargateResponse response = api.getUsageFargate()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for hosts and containers
     *
     * Get hourly usage for hosts and containers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageHostsTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageHostsResponse response = api.getUsageHosts()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for indexed spans
     *
     * Get hourly usage for indexed spans.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageIndexedSpansTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageIndexedSpansResponse response = api.getUsageIndexedSpans()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for IoT
     *
     * Get hourly usage for IoT.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageInternetOfThingsTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageIoTResponse response = api.getUsageInternetOfThings()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for Lambda
     *
     * Get hourly usage for lambda.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageLambdaTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageLambdaResponse response = api.getUsageLambda()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for Logs
     *
     * Get hourly usage for logs.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageLogsTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageLogsResponse response = api.getUsageLogs()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for Logs by Index
     *
     * Get hourly usage for logs by index.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageLogsByIndexTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //List<String> indexName = null;
        //UsageLogsByIndexResponse response = api.getUsageLogsByIndex()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .indexName(indexName)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly logs usage by retention
     *
     * Get hourly usage for indexed logs by retention period.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageLogsByRetentionTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageLogsByRetentionResponse response = api.getUsageLogsByRetention()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for Network Flows
     *
     * Get hourly usage for network flows.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageNetworkFlowsTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageNetworkFlowsResponse response = api.getUsageNetworkFlows()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for Network Hosts
     *
     * Get hourly usage for network hosts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageNetworkHostsTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageNetworkHostsResponse response = api.getUsageNetworkHosts()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for profiled hosts
     *
     * Get hourly usage for profiled hosts.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageProfilingTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageProfilingResponse response = api.getUsageProfiling()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for RUM Sessions
     *
     * Get hourly usage for [RUM](https://docs.datadoghq.com/real_user_monitoring/) Sessions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageRumSessionsTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //String type = null;
        //UsageRumSessionsResponse response = api.getUsageRumSessions()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .type(type)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for Sensitive Data Scanner
     *
     * Get hourly usage for Sensitive Data Scanner.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageSDSTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageSDSResponse response = api.getUsageSDS()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for SNMP devices
     *
     * Get hourly usage for SNMP devices.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageSNMPTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageSNMPResponse response = api.getUsageSNMP()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get usage across your multi-org account
     *
     * Get usage across your multi-org account. You must have the multi-org feature enabled.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageSummaryTest() throws ApiException {
        //OffsetDateTime startMonth = null;
        //OffsetDateTime endMonth = null;
        //Boolean includeOrgDetails = null;
        //UsageSummaryResponse response = api.getUsageSummary()
        //        .startMonth(startMonth)
        //        .endMonth(endMonth)
        //        .includeOrgDetails(includeOrgDetails)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for Synthetics Checks
     *
     * Get hourly usage for [Synthetics checks](https://docs.datadoghq.com/synthetics/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageSyntheticsTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageSyntheticsResponse response = api.getUsageSynthetics()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for Synthetics API Checks
     *
     * Get hourly usage for [synthetics API checks](https://docs.datadoghq.com/synthetics/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageSyntheticsAPITest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageSyntheticsAPIResponse response = api.getUsageSyntheticsAPI()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for Synthetics Browser Checks
     *
     * Get hourly usage for synthetics browser checks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageSyntheticsBrowserTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageSyntheticsBrowserResponse response = api.getUsageSyntheticsBrowser()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get hourly usage for custom metrics
     *
     * Get hourly usage for [custom metrics](https://docs.datadoghq.com/developers/metrics/custom_metrics/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageTimeseriesTest() throws ApiException {
        //OffsetDateTime startHr = null;
        //OffsetDateTime endHr = null;
        //UsageTimeseriesResponse response = api.getUsageTimeseries()
        //        .startHr(startHr)
        //        .endHr(endHr)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get all custom metrics by hourly average
     *
     * Get all [custom metrics](https://docs.datadoghq.com/developers/metrics/custom_metrics/) by hourly average. Use the month parameter to get a month-to-date data resolution or use the day parameter to get a daily resolution. One of the two is required, and only one of the two is allowed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsageTopAvgMetricsTest() throws ApiException {
        //OffsetDateTime month = null;
        //OffsetDateTime day = null;
        //List<String> names = null;
        //Integer limit = null;
        //String nextRecordId = null;
        //UsageTopAvgMetricsResponse response = api.getUsageTopAvgMetrics()
        //        .month(month)
        //        .day(day)
        //        .names(names)
        //        .limit(limit)
        //        .nextRecordId(nextRecordId)
        //        .execute();
        // TODO: test validations
    }

}
