/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.v1.client.api;

import com.datadog.api.v1.client.*;
import com.datadog.api.v1.client.auth.*;
import com.datadog.api.v1.client.model.APIErrorResponse;
import java.io.File;
import com.datadog.api.v1.client.model.IdpResponse;
import com.datadog.api.v1.client.model.Organization;
import com.datadog.api.v1.client.model.OrganizationCreateBody;
import com.datadog.api.v1.client.model.OrganizationCreateResponse;
import com.datadog.api.v1.client.model.OrganizationListResponse;
import com.datadog.api.v1.client.model.OrganizationResponse;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationsApi
 */
public class OrganizationsApiTest {

    private final OrganizationsApi api = new OrganizationsApi();

    /**
     * Create a child organization
     *
     * Create a child organization.  This endpoint requires the [multi-organization account](https://docs.datadoghq.com/account_management/multi_organization/) feature and must be enabled by [contacting support](https://docs.datadoghq.com/help/).  Once a new child organization is created, you can interact with it by using the &#x60;org.public_id&#x60;, &#x60;api_key.key&#x60;, and &#x60;application_key.hash&#x60; provided in the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChildOrgTest() throws ApiException {
        //OrganizationCreateBody body = null;
        //OrganizationCreateResponse response = api.createChildOrg()
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get organization information
     *
     * Get organization information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrgTest() throws ApiException {
        //String publicId = null;
        //OrganizationResponse response = api.getOrg(publicId)
        //        .execute();
        // TODO: test validations
    }

    /**
     * List your managed organizations
     *
     * List your managed organizations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listOrgsTest() throws ApiException {
        //OrganizationListResponse response = api.listOrgs()
        //        .execute();
        // TODO: test validations
    }

    /**
     * Update your organization
     *
     * Update your organization.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrgTest() throws ApiException {
        //String publicId = null;
        //Organization body = null;
        //OrganizationResponse response = api.updateOrg(publicId)
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Upload IdP metadata
     *
     * There are a couple of options for updating the Identity Provider (IdP) metadata from your SAML IdP.  * **Multipart Form-Data**: Post the IdP metadata file using a form post.  * **XML Body:** Post the IdP metadata file as the body of the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadIdPForOrgTest() throws ApiException {
        //String publicId = null;
        //File idpFile = null;
        //IdpResponse response = api.uploadIdPForOrg(publicId)
        //        .idpFile(idpFile)
        //        .execute();
        // TODO: test validations
    }

}
