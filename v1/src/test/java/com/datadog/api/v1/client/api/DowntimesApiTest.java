/*
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2019-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.v1.client.api;

import com.datadog.api.v1.client.*;
import com.datadog.api.v1.client.auth.*;
import com.datadog.api.v1.client.model.APIErrorResponse;
import com.datadog.api.v1.client.model.CancelDowntimesByScopeRequest;
import com.datadog.api.v1.client.model.CanceledDowntimesIds;
import com.datadog.api.v1.client.model.Downtime;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DowntimesApi
 */
public class DowntimesApiTest {

    private final DowntimesApi api = new DowntimesApi();

    /**
     * Cancel a downtime
     *
     * Cancel a downtime.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelDowntimeTest() throws ApiException {
        //Long downtimeId = null;
        //api.cancelDowntime(downtimeId)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Cancel downtimes by scope
     *
     * Delete all downtimes that match the scope of &#x60;X&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelDowntimesByScopeTest() throws ApiException {
        //CancelDowntimesByScopeRequest body = null;
        //CanceledDowntimesIds response = api.cancelDowntimesByScope()
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Schedule a downtime
     *
     * Schedule a downtime.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDowntimeTest() throws ApiException {
        //Downtime body = null;
        //Downtime response = api.createDowntime()
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get a downtime
     *
     * Get downtime detail by &#x60;downtime_id&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDowntimeTest() throws ApiException {
        //Long downtimeId = null;
        //Downtime response = api.getDowntime(downtimeId)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get all downtimes
     *
     * Get all scheduled downtimes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listDowntimesTest() throws ApiException {
        //Boolean currentOnly = null;
        //List<Downtime> response = api.listDowntimes()
        //        .currentOnly(currentOnly)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get all downtimes for a monitor
     *
     * Get all downtimes for the specified monitor
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listMonitorDowntimesTest() throws ApiException {
        //Long monitorId = null;
        //List<Downtime> response = api.listMonitorDowntimes(monitorId)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Update a downtime
     *
     * Update a single downtime by &#x60;downtime_id&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDowntimeTest() throws ApiException {
        //Long downtimeId = null;
        //Downtime body = null;
        //Downtime response = api.updateDowntime(downtimeId)
        //        .body(body)
        //        .execute();
        // TODO: test validations
    }

}
