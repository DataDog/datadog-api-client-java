package {{modelPackage}};

import java.util.Objects;
import java.io.IOException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;

@JsonSerialize(using = UnparsedObject.UnparsedObjectSerializer.class)
public class UnparsedObject {
    Object data;

    public UnparsedObject(Object data) {
        this.data = data;
    }

    public static class UnparsedObjectSerializer extends StdSerializer<UnparsedObject> {
        public UnparsedObjectSerializer(Class<UnparsedObject> t) {
            super(t);
        }

        public UnparsedObjectSerializer() {
            this(null);
        }

        @Override
        public void serialize(UnparsedObject value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.data);
        }
    }

    public Object getData() {
        return this.data;
    }

    public void setData(Object data) {
        this.data = data;
    }

    @Override
    public String toString() {
        return data.toString();
    }

    /**
    * Return true if this UnparsedObject object is equal to o.
    */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return Objects.equals(this.data, ((UnparsedObject) o).data);
    }

    @JsonCreator
    public static UnparsedObject fromValue(Object value) {
        return new UnparsedObject(value);
    }
}
