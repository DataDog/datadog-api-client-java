package {{package}};

import {{invokerPackage}}.ApiException;
import {{invokerPackage}}.ApiClient;
import {{invokerPackage}}.ApiResponse;
import {{invokerPackage}}.Configuration;
import {{invokerPackage}}.Pair;

import javax.ws.rs.core.GenericType;
import javax.ws.rs.client.Invocation;

{{#imports}}import {{import}};
{{/imports}}

{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

{{/fullJavaUtil}}
{{>generatedAnnotation}}
{{#operations}}
public class {{classname}} {
  private ApiClient apiClient;

  public {{classname}}() {
    this(Configuration.getDefaultApiClient());
  }

  public {{classname}}(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get the API client
   *
   * @return API client
   */
  public ApiClient getApiClient() {
    return apiClient;
  }

  /**
   * Set the API client
   *
   * @param apiClient an instance of API client
   */
  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  {{#operation}}

  {{#hasOptionalParams}}
  /**
   * Manage optional parameters to {{operationId}}.
   */
  public static class {{operationIdOriginal}}OptionalParameters {
    {{#optionalParams}}
    private {{{dataType}}} {{paramName}};
    {{/optionalParams}}

    {{#optionalParams}}

    /**
     * Set {{paramName}}
     * @param {{paramName}} {{description}} (optional{{^isContainer}}{{#defaultValue}}, default to {{.}}{{/defaultValue}}{{/isContainer}})
     * @return {{operationIdOriginal}}OptionalParameters
     */
    public {{operationIdOriginal}}OptionalParameters {{paramName}}({{{dataType}}} {{paramName}}) {
      this.{{paramName}} = {{paramName}};
      return this;
    }
    {{/optionalParams}}
  }
  {{/hasOptionalParams}}

  /**
   * {{summary}}
   *
   * See {@link #{{operationId}}WithHttpInfo}.
   *
   {{#requiredParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}
   {{/requiredParams}}
   {{#returnType}}
   * @return {{returnType}}
   {{/returnType}}
   * @throws ApiException if fails to make API call
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  {{#hasOptionalParams}}
  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#requiredParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}) throws ApiException {
    {{#returnType}}return {{/returnType}}{{operationId}}WithHttpInfo({{#requiredParams}}{{paramName}}, {{/requiredParams}}new {{operationIdOriginal}}OptionalParameters()){{#returnType}}.getData(){{/returnType}};
  }

  /**
   * {{summary}}
   *
   * See {@link #{{operationId}}WithHttpInfo}.
   *
   {{#requiredParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}
   {{/requiredParams}}
   {{#returnType}}
   * @return CompletableFuture&lt;{{returnType}}&gt;
   {{/returnType}}
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public CompletableFuture<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>{{operationId}}Async({{#requiredParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/requiredParams}}) {
    return {{operationId}}WithHttpInfoAsync({{#requiredParams}}{{paramName}}, {{/requiredParams}}new {{operationIdOriginal}}OptionalParameters()).thenApply(response -> {
        return response.getData();
    });
  }

  /**
   * {{summary}}
   *
   * See {@link #{{operationId}}WithHttpInfo}.
   *
   {{#requiredParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}
   {{/requiredParams}}
   * @param parameters Optional parameters for the request.
   {{#returnType}}
   * @return {{returnType}}
   {{/returnType}}
   * @throws ApiException if fails to make API call
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#requiredParams}}{{{dataType}}} {{paramName}}, {{/requiredParams}}{{operationIdOriginal}}OptionalParameters parameters) throws ApiException {
    {{#returnType}}return {{/returnType}}{{operationId}}WithHttpInfo({{#requiredParams}}{{paramName}}, {{/requiredParams}}parameters){{#returnType}}.getData(){{/returnType}};
  }

  /**
   * {{summary}}
   *
   * See {@link #{{operationId}}WithHttpInfoAsync}.
   *
   {{#requiredParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}
   {{/requiredParams}}
   * @param parameters Optional parameters for the request.
   {{#returnType}}
   * @return CompletableFuture&lt;{{returnType}}&gt;
   {{/returnType}}
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public CompletableFuture<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>{{operationId}}Async({{#requiredParams}}{{{dataType}}} {{paramName}}, {{/requiredParams}}{{operationIdOriginal}}OptionalParameters parameters) {
    return {{operationId}}WithHttpInfoAsync({{#requiredParams}}{{paramName}}, {{/requiredParams}}parameters).thenApply(response -> {
        return response.getData();
    });
  }
  {{/hasOptionalParams}}
  {{^hasOptionalParams}}
  public {{#returnType}}{{{returnType}}} {{/returnType}}{{^returnType}}void {{/returnType}}{{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException {
    {{#returnType}}return {{/returnType}}{{operationId}}WithHttpInfo({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}){{#returnType}}.getData(){{/returnType}};
  }

  /**
   * {{summary}}
   *
   * See {@link #{{operationId}}WithHttpInfoAsync}.
   *
   {{#requiredParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}
   {{/requiredParams}}
   {{#returnType}}
   * @return CompletableFuture&lt;{{returnType}}&gt;
   {{/returnType}}
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  public CompletableFuture<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>{{operationId}}Async({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) {
    return {{operationId}}WithHttpInfoAsync({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}).thenApply(response -> {
        return response.getData();
    });
  }
  {{/hasOptionalParams}}

  /**
   * {{summary}}
   *
   * {{notes}}
   *
   {{#requiredParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}
   {{/requiredParams}}
   {{#hasOptionalParams}}
   * @param parameters Optional parameters for the request.
   {{/hasOptionalParams}}
   * @return ApiResponse&lt;{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Void{{/returnType}}&gt;
   * @throws ApiException if fails to make API call
   {{#responses.0}}
   * @http.response.details
   * <table border="1">
   *    <caption>Response details</caption>
   *       <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
       {{#responses}}
   *       <tr><td> {{code}} </td><td> {{message}} </td><td> {{#headers}} * {{baseName}} - {{description}} <br> {{/headers}}{{^headers.0}} - {{/headers.0}} </td></tr>
       {{/responses}}
   *     </table>
   {{/responses.0}}
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  {{#hasOptionalParams}}
  public ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {{operationId}}WithHttpInfo({{#requiredParams}}{{{dataType}}} {{paramName}}, {{/requiredParams}}{{operationIdOriginal}}OptionalParameters parameters) throws ApiException {
  {{/hasOptionalParams}}
  {{^hasOptionalParams}}
  public ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {{operationId}}WithHttpInfo({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) throws ApiException {
  {{/hasOptionalParams}}
    Object localVarPostBody = {{#bodyParam}}{{#required}}{{paramName}}{{/required}}{{^required}}parameters.{{paramName}}{{/required}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
    {{#allParams}}{{#required}}
    // verify the required parameter '{{paramName}}' is set
    if ({{paramName}} == null) {
      throw new ApiException(400, "Missing the required parameter '{{paramName}}' when calling {{operationId}}");
    }
    {{/required}}
    {{^required}}
    {{^isBodyParam}}
    {{{dataType}}} {{paramName}} = parameters.{{paramName}};
    {{/isBodyParam}}
    {{/required}}
    {{/allParams}}
    // create path and map variables
    String localVarPath = "{{{path}}}"{{#pathParams}}
      .replaceAll("\\{" + "{{baseName}}" + "\\}", apiClient.escapeString({{{paramName}}}.toString())){{/pathParams}};

    {{#hasQueryParams}}{{javaUtilPrefix}}List<Pair> localVarQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();{{/hasQueryParams}}
    {{javaUtilPrefix}}Map<String, String> localVarHeaderParams = new {{javaUtilPrefix}}HashMap<String, String>();{{#hasCookieParams}}
    {{javaUtilPrefix}}Map<String, String> localVarCookieParams = new {{javaUtilPrefix}}HashMap<String, String>();{{/hasCookieParams}}{{#hasFormParams}}
    {{javaUtilPrefix}}Map<String, Object> localVarFormParams = new {{javaUtilPrefix}}HashMap<String, Object>();{{/hasFormParams}}

    {{#queryParams}}
    localVarQueryParams.addAll(apiClient.parameterToPairs("{{{collectionFormat}}}", "{{baseName}}", {{paramName}}));
    {{/queryParams}}

    {{#headerParams}}if ({{paramName}} != null)
      localVarHeaderParams.put("{{baseName}}", apiClient.parameterToString({{paramName}}));
    {{/headerParams}}

    {{#cookieParams}}
    if ({{paramName}} != null)
      localVarCookieParams.put("{{baseName}}", apiClient.parameterToString({{paramName}}));
    {{/cookieParams}}

    {{#formParams}}if ({{paramName}} != null)
      localVarFormParams.put("{{baseName}}", {{paramName}});
    {{/formParams}}

    Invocation.Builder builder = apiClient.createBuilder("{{classname}}.{{operationId}}", localVarPath, {{#hasQueryParams}}localVarQueryParams{{/hasQueryParams}}{{^hasQueryParams}}new {{javaUtilPrefix}}ArrayList<Pair>(){{/hasQueryParams}}, localVarHeaderParams, {{#hasCookieParams}}localVarCookieParams{{/hasCookieParams}}{{^hasCookieParams}}new {{javaUtilPrefix}}HashMap<String, String>(){{/hasCookieParams}}, new String[] { {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}} }, new String[] { {{#authMethods}}"{{name}}"{{^-last}}, {{/-last}}{{/authMethods}} });
    return apiClient.invokeAPI("{{httpMethod}}", builder, localVarHeaderParams,  new String[] { {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}} }, localVarPostBody,{{#hasFormParams}}localVarFormParams{{/hasFormParams}}{{^hasFormParams}}new {{javaUtilPrefix}}HashMap<String, Object>(){{/hasFormParams}} , {{#bodyParam}}{{#isNullable}}true{{/isNullable}}{{^isNullable}}false{{/isNullable}}{{/bodyParam}}{{^bodyParam}}false{{/bodyParam}}, {{#returnType}}new GenericType<{{{returnType}}}>() {}{{/returnType}}{{^returnType}}null{{/returnType}});
  }

  /**
   * {{summary}}
   *
   * See {@link #{{operationId}}WithHttpInfo}.
   *
   {{#requiredParams}}
   * @param {{paramName}} {{description}}{{#required}} (required){{/required}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}
   {{/requiredParams}}
   {{#hasOptionalParams}}
   * @param parameters Optional parameters for the request.
   {{/hasOptionalParams}}
   * @return CompletableFuture&lt;ApiResponse&lt;{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Void{{/returnType}}&gt;&gt;
   {{#isDeprecated}}
   * @deprecated
   {{/isDeprecated}}
   {{#externalDocs}}
   * {{description}}
   * @see <a href="{{url}}">{{summary}} Documentation</a>
   {{/externalDocs}}
   */
  {{#isDeprecated}}
  @Deprecated
  {{/isDeprecated}}
  {{#hasOptionalParams}}
  public CompletableFuture<ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>> {{operationId}}WithHttpInfoAsync({{#requiredParams}}{{{dataType}}} {{paramName}}, {{/requiredParams}}{{operationIdOriginal}}OptionalParameters parameters) {
  {{/hasOptionalParams}}
  {{^hasOptionalParams}}
  public CompletableFuture<ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>> {{operationId}}WithHttpInfoAsync({{#allParams}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/allParams}}) {
  {{/hasOptionalParams}}
    Object localVarPostBody = {{#bodyParam}}{{#required}}{{paramName}}{{/required}}{{^required}}parameters.{{paramName}}{{/required}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
    {{#allParams}}{{#required}}
    // verify the required parameter '{{paramName}}' is set
    if ({{paramName}} == null) {
      CompletableFuture<ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>> result = new CompletableFuture<>();
      result.completeExceptionally(new ApiException(400, "Missing the required parameter '{{paramName}}' when calling {{operationId}}"));
      return result;
    }
    {{/required}}
    {{^required}}
    {{^isBodyParam}}
    {{{dataType}}} {{paramName}} = parameters.{{paramName}};
    {{/isBodyParam}}
    {{/required}}
    {{/allParams}}
    // create path and map variables
    String localVarPath = "{{{path}}}"{{#pathParams}}
      .replaceAll("\\{" + "{{baseName}}" + "\\}", apiClient.escapeString({{{paramName}}}.toString())){{/pathParams}};

    {{#hasQueryParams}}{{javaUtilPrefix}}List<Pair> localVarQueryParams = new {{javaUtilPrefix}}ArrayList<Pair>();{{/hasQueryParams}}
    {{javaUtilPrefix}}Map<String, String> localVarHeaderParams = new {{javaUtilPrefix}}HashMap<String, String>();{{#hasCookieParams}}
    {{javaUtilPrefix}}Map<String, String> localVarCookieParams = new {{javaUtilPrefix}}HashMap<String, String>();{{/hasCookieParams}}{{#hasFormParams}}
    {{javaUtilPrefix}}Map<String, Object> localVarFormParams = new {{javaUtilPrefix}}HashMap<String, Object>();{{/hasFormParams}}

    {{#queryParams}}
    localVarQueryParams.addAll(apiClient.parameterToPairs("{{{collectionFormat}}}", "{{baseName}}", {{paramName}}));
    {{/queryParams}}

    // Set Operation-ID header for telemetry
    localVarHeaderParams.put("DD-OPERATION-ID", "{{operationId}}");

    {{#headerParams}}if ({{paramName}} != null)
      localVarHeaderParams.put("{{baseName}}", apiClient.parameterToString({{paramName}}));
    {{/headerParams}}

    {{#cookieParams}}if ({{paramName}} != null)
      localVarCookieParams.put("{{baseName}}", apiClient.parameterToString({{paramName}}));
    {{/cookieParams}}

    {{#formParams}}if ({{paramName}} != null)
      localVarFormParams.put("{{baseName}}", {{paramName}});
    {{/formParams}}

    Invocation.Builder builder;
    try {
      builder = apiClient.createBuilder("{{classname}}.{{operationId}}", localVarPath, {{#hasQueryParams}}localVarQueryParams{{/hasQueryParams}}{{^hasQueryParams}}new {{javaUtilPrefix}}ArrayList<Pair>(){{/hasQueryParams}}, localVarHeaderParams, {{#hasCookieParams}}localVarCookieParams{{/hasCookieParams}}{{^hasCookieParams}}new {{javaUtilPrefix}}HashMap<String, String>(){{/hasCookieParams}}, new String[] { {{#produces}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/produces}} }, new String[] { {{#authMethods}}"{{name}}"{{^-last}}, {{/-last}}{{/authMethods}} });
    } catch (ApiException ex) {
      CompletableFuture<ApiResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>> result = new CompletableFuture<>();
      result.completeExceptionally(ex);
      return result;
    }
    return apiClient.invokeAPIAsync("{{httpMethod}}", builder, localVarHeaderParams,  new String[] { {{#consumes}}"{{{mediaType}}}"{{^-last}}, {{/-last}}{{/consumes}} }, localVarPostBody, {{#hasFormParams}}localVarFormParams{{/hasFormParams}}{{^hasFormParams}}new {{javaUtilPrefix}}HashMap<String, Object>(){{/hasFormParams}}, {{#bodyParam}}{{#isNullable}}true{{/isNullable}}{{^isNullable}}false{{/isNullable}}{{/bodyParam}}{{^bodyParam}}false{{/bodyParam}}, {{#returnType}}new GenericType<{{{returnType}}}>() {}{{/returnType}}{{^returnType}}null{{/returnType}});
  }
  {{/operation}}
}
{{/operations}}
