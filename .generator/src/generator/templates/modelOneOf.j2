import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.fasterxml.jackson.annotation.JsonIgnore;
import {{ package_name }}.JSON;

{{ generated_annotation }}
@JsonDeserialize(using = {{ name }}.{{name }}Deserializer.class)
@JsonSerialize(using = {{ name }}.{{ name }}Serializer.class)
public class {{ name }} extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger({{ name }}.class.getName());

    @JsonIgnore
    public boolean unparsed = false;

    public static class {{ name }}Serializer extends StdSerializer<{{ name }}> {
        public {{ name }}Serializer(Class<{{ name }}> t) {
            super(t);
        }

        public {{ name }}Serializer() {
            this(null);
        }

        @Override
        public void serialize({{ name }} value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class {{ name }}Deserializer extends StdDeserializer<{{ name }}> {
        public {{ name }}Deserializer() {
            this({{ name}}.class);
        }

        public {{ name }}Deserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public {{ name }} deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            Object tmp = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            {%- for oneOf in model.oneOf %}
            {%- set dataType = get_type(oneOf) %}
            // deserialize {{ dataType }}
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if ({{ dataType }}.class.equals(Integer.class) || {{ dataType }}.class.equals(Long.class) || {{ dataType }}.class.equals(Float.class) || {{ dataType }}.class.equals(Double.class) || {{ dataType }}.class.equals(Boolean.class) || {{ dataType }}.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= (({{ dataType }}.class.equals(Integer.class) || {{ dataType }}.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= (({{ dataType }}.class.equals(Float.class) || {{ dataType }}.class.equals(Double.class)) && (token == JsonToken.VALUE_NUMBER_FLOAT || token == JsonToken.VALUE_NUMBER_INT));
                        attemptParsing |= ({{ dataType }}.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= ({{ dataType }}.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                        {%- if oneOf.nullable %}
                        attemptParsing |= (token == JsonToken.VALUE_NULL);
                        {%- endif %}
                    }
                }
                if (attemptParsing) {
                    tmp = tree.traverse(jp.getCodec()).readValueAs({{ dataType }}.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    {%- if not oneOf|is_primitive %}
                    if (!(({{ dataType }})tmp).unparsed) {
                        deserialized = tmp;
                        match++;
                    }
                    {%- else %}
                    deserialized = tmp;
                    match++;
                    {% endif %}
                    log.log(Level.FINER, "Input data matches schema '{{ dataType }}'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema '{{ dataType }}'", e);
            }
            {#  #}
            {%- endfor %}
            {{ name }} ret = new {{ name }}();
            if (match == 1) {
                ret.setActualInstance(deserialized);
            } else {
                Map<String, Object> res = new ObjectMapper().readValue(tree.traverse(jp.getCodec()).readValueAsTree().toString(), new TypeReference<Map<String, Object>>() {});
                ret.setActualInstance(new UnparsedObject(res));
            }
            return ret;
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public {{ name }} getNullValue(DeserializationContext ctxt) throws JsonMappingException {
        {%- if model.nullable %}
            return null;
        {%- else %}
            throw new JsonMappingException(ctxt.getParser(), "{{ name }} cannot be null");
        {%- endif  %}
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public {{ name }}() {
        super("oneOf", Boolean.{{ "TRUE" if model.nullable else "FALSE" }});
    }

    {%- for oneOf in model.oneOf %}
    public {{ name }}({{ get_type(oneOf) }} o) {
        super("oneOf", Boolean.{{ "TRUE" if model.nullable else "FALSE" }});
        setActualInstance(o);
    }
    {%- endfor  %}

    static {
        {%- for oneOf in model.oneOf %}
        schemas.put("{{ get_type(oneOf) }}", new GenericType<{{ get_type(oneOf) }}>() {
        });
        {%- endfor  %}
        JSON.registerDescendants({{ name }}.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return {{ name }}.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * {% for oneOf in model.oneOf %}{{ get_type(oneOf) }}{% if loop.nextitem %}, {% endif %}{% endfor %}
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        {%- if model.nullable %}
        if (instance == null) {
           super.setActualInstance(instance);
           return;
        }

        {% endif %}
        {%- for oneOf in model.oneOf %}
        if (JSON.isInstanceOf({{ get_type(oneOf) }}.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        {%- if loop.last %}

        if (JSON.isInstanceOf(UnparsedObject.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }
        {%- endif %}
        {%- endfor %}
        throw new RuntimeException("Invalid instance type. Must be {% for oneOf in model.oneOf %}{{ get_type(oneOf) }}{% if loop.nextitem %}, {% endif %}{% endfor %}");
    }

    /**
     * Get the actual instance, which can be the following:
     * {% for oneOf in model.oneOf %}{{ get_type(oneOf) }}{% if loop.nextitem %}, {% endif %}{% endfor %}
     *
     * @return The actual instance ({% for oneOf in model.oneOf %}{{ get_type(oneOf) }}{% if loop.nextitem %}, {% endif %}{% endfor %})
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    {%- for oneOf in model.oneOf %}
    {%- set dataType = get_type(oneOf) %}

    /**
     * Get the actual instance of `{{ dataType }}`. If the actual instance is not `{{ dataType }}`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `{{ dataType }}`
     * @throws ClassCastException if the instance is not `{{ dataType }}`
     */
    public {{ dataType }} get{{ dataType }}() throws ClassCastException {
        return ({{ dataType }})super.getActualInstance();
    }

    {%- endfor %}
}