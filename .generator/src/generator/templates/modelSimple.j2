/**
{{ model.description|docstring }}
 {%- if model.deprecated %}
 * @deprecated
 {%- endif %}
 */
{%- if model.deprecated %}
@Deprecated
{%- endif %}
@JsonPropertyOrder({
{%- for attr, schema in model.get("properties", {}).items() %}
  {{ name }}.JSON_PROPERTY_{{ attr|snake_case|upper }}{%- if loop.nextitem %},{%- endif %}
{%- endfor %}
})
{{ generated_annotation }}
public class {{ name }} {%- if model.get("x-generate-alias-as-model") %} extends {% if "items" in model %}ArrayList<{{ get_type(model["items"]) }}>{% else %}{{ get_type(model) }}{% endif %}{% endif %} {
  @JsonIgnore
  public boolean unparsed = false;
  {%- for attr, schema in model.get("properties", {}).items() %}
  {%- set attributeName = attr|attribute_name %}
  {%- set variableName = attr|variable_name %}
  {%- set dataType = get_type(schema) %}
  {%- set isRequired = attr in model.get("required", []) %}
  {%- set isNullable = schema.nullable %}
  {%- set defaultValue = schema.get("default", None) %}
  public static final String JSON_PROPERTY_{{ attr|snake_case|upper }} = "{{ attr }}";

  {%- if schema.format == "date-time" %}
  @JsonSerialize(using = JsonTimeSerializer.class)
  {%- endif %}
  {%- if not isRequired and isNullable %}
    {%- if "items" in schema or schema.additionalProperties is defined or (schema.type is not defined and "oneOf" not in schema) %}
  private JsonNullable<{{ dataType }}> {{ variableName }} = JsonNullable.<{{ dataType }}>undefined();
    {%- else %}
  private JsonNullable<{{ dataType }}> {{ variableName }} = JsonNullable.<{{ dataType }}>{%- if defaultValue != None %}of({{ defaultValue|format_value(schema=schema, default_value=True, type_=dataType) }}){%- else %}undefined(){%- endif%};
    {%- endif %}
  {%- else %}
    {%- if "items" in schema %}
  private {{ dataType }} {{ variableName }}{%- if isRequired %} = new ArrayList<>(){%- else %} = null{%- endif %};
    {%- elif schema.additionalProperties is defined or (not schema.get("type") and "oneOf" not in schema) %}
  private {{ dataType }} {{ variableName }}{%- if isRequired %} = new {{ dataType }}(){%- else %} = null{%- endif %};
    {%- else %}
  private {{ dataType }} {{ variableName }}{%- if defaultValue != None %} = {{ defaultValue|format_value(schema=schema, default_value=True, type_=dataType) }}{%- endif %};
    {%- endif %}
  {%- endif %}
{#  #}
  {%- endfor %}

  {%- set requiredAttr = model|get_required_attributes %}
  {%- if requiredAttr %}
  public {{ name }}() {}

  @JsonCreator
  public {{ name }}(
            {%- for attr, schema in requiredAttr.items() %}
            {%- set attributeName = attr|attribute_name %}
            {%- set variableName = attr|variable_name %}
            {%- set isRequired = attr in model.get("required", []) %}
            {%- set isNullable = schema.nullable %}
            {%- set dataType = get_type(schema) %}
            @JsonProperty(required=true, value=JSON_PROPERTY_{{ attr|snake_case|upper }})
                {%- if not isRequired and isNullable %}JsonNullable<{{ dataType }}>{%- else %}{{ dataType }}{%- endif %} {{ variableName }}{%- if loop.nextitem %},{%- endif %}
            {%- endfor %}) {
        {%- for attr, schema in requiredAttr.items() %}
        {%- set attributeName = attr|attribute_name %}
        {%- set variableName = attr|variable_name %}
        {%- set isNullable = schema.nullable %}
        this.{{ variableName }} = {{ variableName }};
        {%- if isNullable %}
        if ({{ variableName }} != null) {
        {%- endif %}
        {%- if schema.enum is defined %}
        this.unparsed |= !{{ variableName }}.isValid();
        {%- endif %}
        {%- if (schema.properties is defined or schema.oneOf is defined) and not schema|is_primitive %}
        this.unparsed |= {{ variableName }}.unparsed;
        {%- endif %}
        {%- if isNullable %}
        }
        {%- endif %}
        {%- endfor %}
  }
  {%- endif %}

  {%- for attr, schema in model.get("properties", {}).items() %}
  {%- set attributeName = attr|attribute_name %}
  {%- set variableName = attr|variable_name %}
  {%- set isNullable = schema.nullable %}
  {%- set dataType = get_type(schema) %}
  {%- set isArray = "items" in schema %}
  {%- set isRequired = attr in model.get("required", []) %}
  {%- set defaultValue = schema.get("default", None) %}

  {%- if not schema.get("readOnly", False) %}
  public {{ name }} {{ variableName }}({{ dataType }} {{ variableName }}) {
    {%- if not isRequired and isNullable %}
    this.{{ variableName }} = JsonNullable.<{{ dataType }}>of({{ variableName }});
    {%- else %}
    this.{{ variableName }} = {{ variableName }};
    {%- if not isArray %}
    {%- if isNullable %}
        if ({{ variableName }} != null) {
    {%- endif %}
    {%- if schema.enum is defined %}
    {%- if not schema|is_primitive %}
    this.unparsed |= !{{ variableName }}.isValid();
    {%- endif %}
    {%- endif %}
    {%- if schema|is_model and not schema|is_primitive %}
    this.unparsed |= {{ variableName }}.unparsed;
    {%- endif %}
    {%- if isNullable %}
    }
    {%- endif %}
    {%- else %}
    {%- if schema.get("items")|is_model and not schema|is_primitive %}
    {%- set itemsDataType = get_type(schema.get("items")) %}
    for ({{ itemsDataType }} item : {{ variableName }}) {
      {%- if schema.enum is defined %}
      this.unparsed |= !item.isValid();
      {%- endif %}
      this.unparsed |= item.unparsed;
    }
    {%- endif %}
    {%- endif %}
    {%- endif %}
    return this;
  }
  {%- if isArray %}
  {%- set itemsDataType = get_type(schema.get("items")) %}
  public {{ name }} add{{ variableName|upperfirst }}Item({{ itemsDataType }} {{ variableName }}Item) {
    {%- if not isRequired and isNullable %}
    if (this.{{ variableName }} == null || !this.{{ variableName }}.isPresent()) {
      this.{{ variableName }} = JsonNullable.<{{ dataType }}>of(new ArrayList<>());
    }
    try {
      this.{{ variableName }}.get().add({{ variableName }}Item);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
    {%- else %}
    {%- if not isRequired %}
    if (this.{{ variableName }} == null) {
      this.{{ variableName }} = new ArrayList<>();
    }
    {%- endif %}
    this.{{ variableName }}.add({{ variableName }}Item);
    {%- if schema.get("items", {}).enum is defined %}
    {%- if not schema.get("items", {})|is_primitive %}
    this.unparsed |= !{{ variableName }}Item.isValid();
    {%-  endif %}
    {%-  endif %}
    {%- if schema.get("items", {})|is_model %}
    {%- if not schema.get("items", {})|is_primitive %}
    this.unparsed |= {{ variableName }}Item.unparsed;
    {%-  endif %}
    {%-  endif %}
    return this;
    {%- endif %}
  }
  {%- endif %}

  {%- if schema.additionalProperties is defined %}
  public {{ name }} put{{ variableName|upperfirst }}Item(String key, {{ get_type(schema.additionalProperties) }} {{ variableName }}Item) {
    {%- if not isRequired and isNullable %}
    if (this.{{ variableName }} == null || !this.{{ variableName }}.isPresent()) {
      this.{{ variableName }} = JsonNullable.<{{ dataType }}>of(new HashMap<>());
    }
    try {
      this.{{ variableName }}.get().put(key, {{ variableName|upperfirst }}Item);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
    {%- else %}
    {%- if not isRequired %}
    if (this.{{ variableName }} == null) {
      this.{{ variableName }} = new HashMap<>();
    }
    {%- endif %}
    this.{{ variableName }}.put(key, {{ variableName }}Item);
    return this;
    {%- endif %}
  }
  {%- endif %}
  {%- endif %}

  /**
{{ schema.description|default("Get" ~ variableName)|docstring }}
  {%- if schema.minimum is defined %}
   * minimum: {{ schema.minimum }}
  {%- endif %}
  {%- if schema.maximum is defined %}
   * maximum: {{ schema.maximum }}
  {%- endif %}
   * @return {{ variableName }}
  {%- if schema.deprecated %}
   * @deprecated
  {%- endif %}
  **/
    {%- if schema.deprecated %}
      @Deprecated
    {%- endif %}
    {%- if isRequired %}
    {%- if isNullable %}
      @jakarta.annotation.Nullable
    {%- endif %}
    {%- else %}
      @jakarta.annotation.Nullable
    {%- endif %}
    {%- if not isRequired and isNullable %}
      @JsonIgnore
    {%- else %}
      @JsonProperty(JSON_PROPERTY_{{ attr|snake_case|upper }})
      @JsonInclude(
        {%- if schema.additionalProperties %}{%- if schema.additionalProperties.nullable %}content = JsonInclude.Include.ALWAYS,{%- endif %}{%- endif %}
        value = JsonInclude.Include.{%- if isRequired %}ALWAYS{%- else %}USE_DEFAULTS{%- endif %})
    {%- endif %}
      public {{ dataType }} get{{ attr|camel_case|upperfirst }}() {
        {%- if not isRequired and isNullable %}
        {%- if schema.get("readOnly", False) %}

        if ({{ variableName }} == null) {
          {{ variableName }} = JsonNullable.<{{  dataType }}>{%- if defaultValue != None %}of({{ defaultValue|format_value(schema=schema, default_value=True, type_=dataType) }}){%- else %}undefined(){%- endif%};
        }
        {%- endif %}
        return {{ variableName }}.orElse(null);
        {%- else %}
        return {{ variableName }};
        {%- endif %}
      }
  {%- if schema.deprecated %}
  @Deprecated
  {%- endif %}
  {%- if not isRequired and isNullable %}
  @JsonProperty(JSON_PROPERTY_{{ attr|snake_case|upper }})
  @JsonInclude(
    {%- if schema.additionalProperties %}{%- if schema.additionalProperties.nullable %}content = JsonInclude.Include.ALWAYS,{%- endif %}{%- endif %}
    value = JsonInclude.Include.{%- if isRequired %}ALWAYS{%- else %}USE_DEFAULTS{%- endif %})
  public JsonNullable<{{ dataType }}> get{{ attr|camel_case|upperfirst }}_JsonNullable() {
    return {{ variableName }};
  }
  @JsonProperty(JSON_PROPERTY_{{ attr|snake_case|upper }})
  {%- if schema.get("readOnly", False) %}private{%- else %}public{%- endif %} void set{{ attr|camel_case|upperfirst }}_JsonNullable(JsonNullable<{{ dataType }}> {{ variableName }}) {
    this.{{ variableName }} = {{ variableName }};
  }
  {%- endif %}

  {%- if not schema.get("readOnly", False) %}
  public void set{{ attr|camel_case|upperfirst }}({{  dataType }} {{ variableName }}) {
    {%- if schema.enum is defined %}
    if (!{{ variableName }}.isValid()) {
        this.unparsed = true;
    }
    {%- endif %}
    {%- if not isRequired and isNullable %}
    this.{{ variableName }} = JsonNullable.<{{ dataType }}>of({{ variableName }});
    {%- else %}
    this.{{ variableName }} = {{ variableName }};
    {%- endif %}
  }
  {%- endif %}
  {%- endfor %}
  {%- if model.get("additionalProperties") %}

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, {{ model.additionalProperties|simple_type }}> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key The arbitrary key to set
   * @param value The associated value
   * @return {{ name }}
   */
  @JsonAnySetter
  public {{ name }} putAdditionalProperty(String key, {{ model.additionalProperties|simple_type }} value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, {{ model.additionalProperties|simple_type }}>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return The additional properties
   */
  @JsonAnyGetter
  public Map<String, {{ model.additionalProperties|simple_type }}> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key The arbitrary key to get
   * @return The specific additional property for the given key
   */
  public {{ model.additionalProperties|simple_type }} getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }
  {%- endif %}

  /**
   * Return true if this {{name}} object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    {%- if model.properties is defined %}
    {{ name }} {{ name|variable_name }} = ({{ name }}) o;
    return {%- for attr, schema in model.get("properties").items() %} Objects.equals(this.{{ attr|variable_name }}, {{ name|variable_name }}.{{ attr|variable_name }}){%- if loop.nextitem or model.get("additionalProperties") %} &&{%- endif %}{%- endfor %}{% if model.get("additionalProperties") %} Objects.equals(this.additionalProperties, {{ name|variable_name }}.additionalProperties){% endif %}
    {%- if model.get("x-generate-alias-as-model") %} &&
        super.equals(o){%- endif %};
    {%- else %}
    return {%- if model.get("x-generate-alias-as-model") %} super.equals(o){%- else %} true{%-endif %};
    {%- endif %}
  }


  @Override
  public int hashCode() {
    return Objects.hash({%- for attr, schema in model.get("properties", {}).items() %}{{ attr|variable_name }}{%- if loop.nextitem %}, {%- endif %}{%-endfor %}
    {%- if model.get("additionalProperties") %}, additionalProperties{%- endif %}
    {%- if model.get("x-generate-alias-as-model") %}{%- if model.properties is defined %}, {%- endif %}super.hashCode(){%- endif %});
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class {{ name }} {\n");
    {%- if model.get("x-generate-alias-as-model") %}
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    {%- endif %}
    {%- for attr, schema in model.get("properties", {}).items() %}
    sb.append("    {{ attr|variable_name }}: ").append(toIndentedString({{ attr|variable_name }})).append("\n");
    {%- endfor %}
    {%- if model.get("additionalProperties") %}
    sb.append("    additionalProperties: ")
        .append(toIndentedString(additionalProperties))
        .append("\n");
    {%- endif %}
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
